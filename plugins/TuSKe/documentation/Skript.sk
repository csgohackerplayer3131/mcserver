Events:
	At Time:
		ID: at_time
		Description:
			An event that occurs at a given minecraft time in every world or only in specific worlds.
		Examples:
			at 18:00
			at 7am in "world"
		Since:
			1.3.4
		Patterns:
			at %time% [in %worlds%]
		Event values:
			event-world
		Cancellable: false
	On Bed Enter:
		ID: bed_enter
		Description:
			Called when a player starts sleeping.
		Since:
			1.0
		Patterns:
			[on] bed enter[ing]
			[on] [player] enter[ing] [a] bed
		Event values:
			event-block
			event-world
			event-player
		Cancellable: true
	On Bed Leave:
		ID: bed_leave
		Description:
			Called when a player leaves a bed.
		Since:
			1.0
		Patterns:
			[on] bed leav(e|ing)
			[on] [player] leav(e|ing) [a] bed
		Event values:
			event-block
			event-world
			event-player
		Cancellable: false
	On Block Damage:
		ID: block_damage
		Description:
			Called when a player starts to break a block. You can usually just use the leftclick event for this.
		Since:
			1.0
		Patterns:
			[on] block damage
		Event values:
			event-location
			event-block
			event-world
			event-player
		Cancellable: true
	On Block Growth:
		ID: block_growth
		Description:
			Called when a crop grows. Alternative to new form of generic grow event.
		Examples:
			on crop growth
		Since:
			2.2-Fixes-V10
		Patterns:
			[on] (plant|crop|block) grow[(th|ing)] [[of] %itemtypes%]
		Event values:
			past event-block
			event-location
			event-block
			event-world
		Cancellable: true
	On Book Editing:
		ID: book_editing
		Patterns:
			[on] [book] edit
		Event values:
			event-world
			event-player
		Cancellable: true
	On Break / Mine:
		ID: break_mine
		Description:
			Called when a block is broken by a player. If you use 'on mine', only events where the broken block dropped something will call the trigger.
		Examples:
			on mine
			on break of stone
			on mine of any ore
		Since:
			1.0 (break), <i>unknown</i> (mine)
		Patterns:
			[on] [block] (break[ing]|1¦min(e|ing)) [[of] %itemtypes%]
		Event values:
			past event-block
			event-location
			event-block
			event-world
			event-entity
			event-player
			future event-block
		Cancellable: true
	On Bucket Empty:
		ID: bucket_empty
		Description:
			Called when a player empties a bucket. You can also use the place event with a check for water or lava.
		Since:
			1.0
		Patterns:
			[on] bucket empty[ing]
			[on] [player] empty[ing] [a] bucket
		Event values:
			past event-block
			event-block
			event-world
			event-player
		Cancellable: true
	On Bucket fill:
		ID: bucket_fill
		Description:
			Called when a player fills a bucket.
		Since:
			1.0
		Patterns:
			[on] bucket fill[ing]
			[on] [player] fill[ing] [a] bucket
		Event values:
			event-block
			event-world
			event-player
			future event-block
		Cancellable: true
	On Burn:
		ID: burn
		Description:
			Called when a block is destroyed by fire.
		Examples:
			on burn
			on burn of wood, fences, or chests
		Since:
			1.0
		Patterns:
			[on] [block] burn[ing] [[of] %itemtypes%]
		Event values:
			event-location
			event-block
			event-world
		Cancellable: true
	On Can Build Check:
		ID: can_build_check
		Description:
			Called when a player rightclicks on a block while holding a block or a placeable item. You can either cancel the event to prevent the block from being built, or uncancel it to allow it.
			Please note that the data value of the block to be placed is not available in this event, only its ID.
		Since:
			1.0 (basic), 2.0 ([un]cancellable)
		Patterns:
			[on] [block] can build check
		Event values:
			past event-block
			event-location
			event-block
			event-world
		Cancellable: false
	On Chat:
		ID: chat
		Description:
			Called whenever a player chats.
		Since:
			1.4.1
		Patterns:
			[on] chat
		Event values:
			event-world
			event-player
		Cancellable: true
	On Chunk Generate:
		ID: chunk_generate
		Description:
			Called after a new chunk was generated.
		Since:
			1.0
		Patterns:
			[on] chunk (generat|populat)(e|ing)
		Event values:
			event-chunk
			event-world
		Cancellable: false
	On Chunk Load:
		ID: chunk_load
		Description:
			Called when a chunk loads. The chunk might or might not contain mobs when it's loaded.
		Since:
			1.0
		Patterns:
			[on] chunk load[ing]
		Event values:
			event-chunk
			event-world
		Cancellable: false
	On Chunk Unload:
		ID: chunk_unload
		Description:
			Called when a chunk is unloaded due to not being near any player. Cancel the event to force the server to keep the chunk loaded and thus keep simulating the chunk (e.g. physics, plant growth, minecarts, etc. will keep working and won't freeze).
		Since:
			1.0
		Patterns:
			[on] chunk unload[ing]
		Event values:
			event-chunk
			event-world
		Cancellable: true
	On Click:
		ID: click
		Description:
			Called when a user clicks on a block, an entity or air with or without an item in their hand.
			Please note that rightclick events with an empty hand while not looking at a block are not sent to the server, so there's no way to detect them.
		Examples:
			on click
			on rightclick holding a fishing rod
			on leftclick on a stone or obsidian
			on rightclick on a creeper
			on click with a sword
		Since:
			1.0
		Patterns:
			[on] [(1¦right|2¦left)(| |-)][mouse(| |-)]click[ing] [on %-entitydata/itemtype%] [(with|using|4¦holding) %itemtype%]
			[on] [(1¦right|2¦left)(| |-)][mouse(| |-)]click[ing] (with|using|4¦holding) %itemtype% on %entitydata/itemtype%
		Event values:
			event-block
			event-itemstack
			event-world
			event-entity
			event-player
		Cancellable: true
	On Close Inventory:
		ID: close_inventory
		Patterns:
			[on] inventory [window] close
		Event values:
			event-inventory
			event-player
		Cancellable: false
	On Combust:
		ID: combust
		Description:
			Called when an entity is set on fire, e.g. by fire or lava, a fireball, or by standing in direct sunlight (zombies, skeletons).
		Since:
			1.0
		Patterns:
			[on] combust[ing]
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Command:
		ID: command
		Description:
			Called when a player enters a command (not neccessarily a Skript command).
		Examples:
			on command
			on command "/stop"
			on command "pm Njol "
		Since:
			2.0
		Patterns:
			[on] command [%-string%]
		Event values:
			event-commandsender
			event-world
			event-player
		Cancellable: true
	On Connect:
		ID: connect
		Description:
			Called when the player connects to the server. This event is called before the player actually joins the server, so if you want to prevent players from joining you should prefer this event over on join.
		Examples:
			on connect:
				player doesn't have permission "VIP"
				number of players is larger than 20,	kick the player due to "The last 5 slots are reserved for VIP players."
		Since:
			2.0
		Patterns:
			[on] [player] connect[ing]
		Event values:
			event-world
			event-player
		Cancellable: false
	On Consume:
		ID: consume
		Description:
			Called when a player is done eating/drinking something, e.g. an apple, bread, meat, milk or a potion.
		Since:
			2.0
		Patterns:
			[on] [player] ((eat|drink)[ing]|consum(e|ing)) [[of] %itemtypes%]
		Event values:
			event-itemstack
			event-world
			event-player
		Cancellable: true
	On Craft:
		ID: craft
		Description:
			Called when a player crafts an item.
		Patterns:
			[on] [player] craft[ing] [[of] %itemtypes%]
		Event values:
			event-itemstack
			event-world
			event-slot
			event-player
			event-recipe
			event-clickaction
			event-inventoryaction
		Cancellable: true
	On Creeper Power:
		ID: creeper_power
		Description:
			Called when a creeper is struck by lighting and gets powered. Cancel the event to prevent the creeper from being powered.
		Since:
			1.0
		Patterns:
			[on] creeper power
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Damage:
		ID: damage
		Description:
			Called when an entity receives damage, e.g. by an attack from another entity, lava, fire, drowning, fall, suffocation, etc.
		Examples:
			on damage
			on damage of a player
		Since:
			1.0
		Patterns:
			[on] damag(e|ing) [of %entitydata%]
		Event values:
			event-projectile
			event-damagecause
		Cancellable: true
	On Death:
		ID: death
		Description:
			Called when a living entity (including players) dies.
		Examples:
			on death
			on death of player
			on death of a wither or ender dragon:
				broadcast "A %entity% has been slain in %world%!"
		Since:
			1.0
		Patterns:
			[on] death [of %entitydatas%]
		Event values:
			event-projectile
			event-entity
			event-world
			event-damagecause
		Cancellable: false
	On Dispense:
		ID: dispense
		Description:
			Called when a dispenser dispenses an item.
		Patterns:
			[on] dispens(e|ing) [[of] %itemtypes%]
		Event values:
			event-location
			event-block
			event-itemstack
			event-world
		Cancellable: true
	On Drop:
		ID: drop
		Description:
			Called when a player drops an item from his inventory.
		Patterns:
			[on] [player] drop[ing] [[of] %itemtypes%]
		Event values:
			event-itemstack
			event-world
			event-itementity
			event-player
		Cancellable: true
	On Enchant:
		ID: enchant
		Patterns:
			[on] enchant
		Event values:
			event-itemstack
			event-player
		Cancellable: true
	On Enderman/Sheep:
		ID: endermansheep
		Description:
			Called when an enderman places or picks up a block, or a sheep eats grass respectively.
		Patterns:
			[on] enderman place
			[on] enderman pickup
			[on] sheep eat
		Event values:
			event-block
			event-itemstack
			event-entity
			event-world
		Cancellable: true
	On Entity Dismount:
		ID: entity_dismount
		Description:
			Called when an entity dismounts.
		Since:
			2.2-dev13b
		Patterns:
			[on] dismount[ing]
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Entity Mount:
		ID: entity_mount
		Description:
			Called when entity starts riding another.
		Since:
			2.2-dev13b
		Patterns:
			[on] mount[ing]
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Experience Spawn:
		ID: experience_spawn
		Description:
			Called whenever experience is about to spawn. This is a helper event for easily being able to stop xp from spawning, as all you can currently do is cancel the event.
			Please note that it's impossible to detect xp orbs spawned by plugins (including Skript) with Bukkit, thus make sure that you have no such plugins if you don't want any xp orbs to spawn. (Many plugins that only change the experience dropped by blocks or entities will be detected without problems though)
		Examples:
			on xp spawn:
				world is "minigame_world"
				cancel event
		Since:
			2.0
		Patterns:
			[on] [e]xp[erience] [orb] spawn
			[on] spawn of [a[n]] [e]xp[erience] [orb]
		Event values:
			event-location
			event-experience
		Cancellable: true
	On Explode:
		ID: explode
		Description:
			Called when an entity (a primed TNT or a creeper) explodes.
		Since:
			1.0
		Patterns:
			[on] explo(d(e|ing)|sion)
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Explosion Prime:
		ID: explosion_prime
		Description:
			Called when an explosive is primed, i.e. an entity will explode shortly. Creepers can abort the explosion if the player gets too far away, while TNT will explode for sure after a short time.
		Since:
			1.0
		Patterns:
			[on] explosion prime
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Fade:
		ID: fade
		Description:
			Called when a block 'fades away', e.g. ice or snow melts.
		Examples:
			on fade of snow or ice
		Since:
			1.0
		Patterns:
			[on] [block] fad(e|ing) [[of] %itemtypes%]
		Event values:
			past event-block
			event-location
			event-block
			event-world
			future event-block
		Cancellable: true
	On First Join:
		ID: first_join
		Description:
			Called when a player joins the server for the first time.
		Since:
			1.3.7
		Patterns:
			[on] first (join|login)
		Event values:
			event-world
			event-player
		Cancellable: false
	On Fishing:
		ID: fishing
		Description:
			Called when a player fishes something. This is not of much use yet.
		Since:
			1.0
		Patterns:
			[on] [player] fish[ing]
		Event values:
			event-world
			event-player
		Cancellable: true
	On Flight Toggle:
		ID: flight_toggle
		Patterns:
			[on] [player] toggl(e|ing) (flight|fly)
			[on] [player] (flight|fly) toggl(e|ing)
		Event values:
			event-world
			event-player
		Cancellable: true
	On Flow:
		ID: flow
		Description:
			Called when a blocks flows or teleports to another block. This not only applies to water and lava, but teleporting dragon eggs as well.
		Since:
			1.0
		Patterns:
			[on] [block] flow[ing]
			[on] block mov(e|ing)
		Event values:
			event-location
			event-block
			event-world
			future event-block
		Cancellable: true
	On Form:
		ID: form
		Description:
			Called when a block is created, but not by a player, e.g. snow forms due to snowfall, water freezes in cold biomes, or a block spreads (see spread event).
		Examples:
			on form of snow
			on form of a mushroom
		Since:
			1.0
		Patterns:
			[on] [block] form[ing] [[of] %itemtypes%]
		Event values:
			past event-block
			event-location
			event-block
			event-world
		Cancellable: true
	On Fuel Burn:
		ID: fuel_burn
		Description:
			Called when a furnace burns an item from its fuel slot.
		Since:
			1.0
		Patterns:
			[on] fuel burn[ing]
		Event values:
			event-location
			event-block
			event-world
		Cancellable: true
	On Gamemode Change:
		ID: gamemode_change
		Description:
			Called when a player's gamemode changes.
		Examples:
			on gamemode change
			on gamemode change to adventure
		Since:
			1.0
		Patterns:
			[on] game[ ]mode change [to %gamemode%]
		Event values:
			event-world
			event-player
		Cancellable: true
	On Generic Move:
		ID: generic_move
		Patterns:
			[on] any movement
		Event values:
			event-block
			event-world
			event-player
		Cancellable: true
	On Grow:
		ID: grow
		Description:
			Called when a tree, giant mushroom or plant grows to next stage.
		Examples:
			on grow
			on grow of a tree
			on grow of a huge jungle tree
		Since:
			1.0 (2.2-dev20 for plants)
		Patterns:
			[on] grow [of (1¦%-structuretype%|2¦%-itemtype%)]
		Event values:
			past event-block
			event-location
			event-block
			event-world
			future event-block
		Cancellable: true
	On Heal:
		ID: heal
		Description:
			Called when an entity is healed, e.g. by eating (players), being fed (pets), or by the effect of a potion of healing (overworld mobs) or harm (nether mobs).
		Since:
			1.0
		Patterns:
			[on] heal[ing]
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Horse Jump:
		ID: horse_jump
		Patterns:
			[on] horse jump
		Event values:
			event-inventoryholder
			event-entity
			event-world
		Cancellable: true
	On Hunger Meter Change:
		ID: hunger_meter_change
		Description:
			Called when the hunger bar of a player changes, i.e. either increases by eating or decreases over time.
		Since:
			1.4.4
		Patterns:
			[on] (food|hunger) (level|met(er|re)|bar) chang(e|ing)
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Ignition:
		ID: ignition
		Description:
			Called when a block starts burning, i.e. a fire block is placed next to it and this block is flammable.
			The burn event will be called when the block is about do be destroyed by the fire.
		Since:
			1.0
		Patterns:
			[on] [block] ignit(e|ion)
		Event values:
			event-location
			event-block
			event-world
			event-player
		Cancellable: true
	On Inventory Click:
		ID: inventory_click
		Description:
			Called when clicking on inventory slot.
		Since:
			2.2-Fixes-V10
		Patterns:
			[on] [player] inventory(-| )click[ing] [[at] %itemtypes%]
		Event values:
			event-itemstack
			event-world
			event-slot
			event-player
			event-recipe
			event-clickaction
			event-inventoryaction
		Cancellable: true
	On Inventory Click:
		ID: inventory_click
		Patterns:
			[on] inventory click
		Event values:
			event-itemstack
			event-world
			event-slot
			event-player
			event-recipe
			event-clickaction
			event-inventoryaction
		Cancellable: true
	On Inventory Close:
		ID: inventory_close
		Description:
			Called when player's currently viewed inventory is closed.
		Since:
			2.2-dev21
		Patterns:
			[on] inventory close[d]
		Event values:
			event-inventory
			event-player
		Cancellable: false
	On Inventory Open:
		ID: inventory_open
		Description:
			Called when an inventory is opened for player.
		Since:
			2.2-dev21
		Patterns:
			[on] inventory open[ed]
		Event values:
			event-inventory
			event-player
		Cancellable: true
	On Item Break:
		ID: item_break
		Description:
			Called when a player breaks his tool because its damage reached the maximum value.
			This event cannot be cancelled.
		Since:
			2.1.1
		Patterns:
			[on] [player] tool break[ing]
			[on] [player] break[ing] (a|the|) tool
		Event values:
			event-itemstack
			event-world
			event-player
		Cancellable: false
	On Item Projectile Hit:
		ID: item_projectile_hit
		Patterns:
			[on] item [projectile] hit
		Event values:
			event-location
			event-itemstack
			event-livingentity
		Cancellable: false
	On Item Spawn:
		ID: item_spawn
		Description:
			Called whenever an item stack is spawned in a world, e.g. as drop of a block or mob, a player throwing items out of his inventory, or a dispenser dispensing an item (not shooting it).
		Patterns:
			[on] item spawn[ing] [[of] %itemtypes%]
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Join:
		ID: join
		Description:
			Called when the player joins the server. The player is already in a world when this event is called, so if you want to prevent players from joining you should prefer on connect over this event.
		Examples:
			on join:
				message "Welcome on our awesome server!"
				broadcast "%player% just joined the server!"
		Since:
			1.0
		Patterns:
			[on] [player] (login|logging in|join[ing])
		Event values:
			event-world
			event-player
		Cancellable: false
	On Kick:
		ID: kick
		Description:
			Called when a player is kicked from the server. You can change the kick message or cancel the event entirely.
		Since:
			1.0
		Patterns:
			[on] [player] (kick|being kicked)
		Event values:
			event-world
			event-player
		Cancellable: true
	On Leaves Decay:
		ID: leaves_decay
		Description:
			Called when a leaf block decays due to not being connected to a tree.
		Since:
			1.0
		Patterns:
			[on] leaves decay[ing]
		Event values:
			event-location
			event-block
			event-world
		Cancellable: true
	On Level Change:
		ID: level_change
		Description:
			Called when a player's level changes, e.g. by gathering experience or by enchanting something.
		Patterns:
			[on] [player] level [change]
		Event values:
			event-world
			event-player
		Cancellable: false
	On Lightning Strike:
		ID: lightning_strike
		Description:
			Called when lightning strikes.
		Since:
			1.0
		Patterns:
			[on] lightning [strike]
		Event values:
			event-world
		Cancellable: true
	On Move On:
		ID: move_on
		Description:
			Called when a player moves onto a certain type of block. Please note that using this event can cause lag if there are many players online.
		Examples:
			on walking on dirt or grass
			on stepping on stone
		Since:
			2.0
		Patterns:
			[on] (step|walk)[ing] (on|over) %*itemtypes%
		Event values:
			event-block
			event-world
			event-player
		Cancellable: true
	On NPC/Citizen Death:
		ID: npccitizen_death
		Patterns:
			[on] (NPC|Citizen) death
		Event values:
			event-object
		Cancellable: false
	On NPC/Citizen Left Click:
		ID: npccitizen_left_click
		Patterns:
			[on] (NPC|Citizen) left click
		Event values:
			event-player
			event-object
			event-number
		Cancellable: true
	On NPC/Citizen Right Click:
		ID: npccitizen_right_click
		Patterns:
			[on] (NPC|Citizen) right click
		Event values:
			event-player
			event-object
			event-number
		Cancellable: true
	On On Any Move:
		ID: on_any_move
		Patterns:
			[on] any[ ]move
		Event values:
			event-block
			event-world
			event-player
		Cancellable: true
	On On Download:
		ID: on_download
		Patterns:
			[on] download
		Event values:
			none
		Cancellable: true
	On On Edit Book:
		ID: on_edit_book
		Patterns:
			[on] [player] edit book
		Event values:
			event-world
			event-player
		Cancellable: true
	On On Enchant:
		ID: on_enchant
		Patterns:
			[on] enchant [item]
		Event values:
			event-itemstack
			event-player
		Cancellable: true
	On On Horse Jump:
		ID: on_horse_jump
		Patterns:
			[on] horse jump
		Event values:
			event-inventoryholder
			event-entity
			event-world
		Cancellable: true
	On On Inventory Click:
		ID: on_inventory_click
		Patterns:
			[on] inventory click
		Event values:
			event-itemstack
			event-world
			event-slot
			event-player
			event-recipe
			event-clickaction
			event-inventoryaction
		Cancellable: true
	On On Inventory Close:
		ID: on_inventory_close
		Patterns:
			[on] inventory open
			[on] close inventory
		Event values:
			event-inventory
			event-player
		Cancellable: false
	On On Inventory Open:
		ID: on_inventory_open
		Patterns:
			[on] inventory open
			[on] open inventory
		Event values:
			event-inventory
			event-player
		Cancellable: true
	On On Jump:
		ID: on_jump
		Patterns:
			[on] jump[ing]
		Event values:
			event-player
		Cancellable: true
	On On Prepare Item Craft:
		ID: on_prepare_item_craft
		Patterns:
			[on] prepare item craft
		Event values:
			event-slot
			event-itemstack
			event-inventory
			event-player
			event-recipe
		Cancellable: false
	On On Server Ping:
		ID: on_server_ping
		Patterns:
			[on] [server] [list] ping
		Event values:
			event-string
		Cancellable: false
	On On Store:
		ID: on_store
		Patterns:
			[on] (store|chest add)
		Event values:
			event-itemstack
			event-inventory
			event-player
		Cancellable: true
	On On Unstore:
		ID: on_unstore
		Patterns:
			[on] (unstore|chest remove)
		Event values:
			event-itemstack
			event-inventory
			event-player
		Cancellable: true
	On Physics:
		ID: physics
		Description:
			Called when a physics check is done on a block. By cancelling this event you can prevent some things from happening, e.g. sand falling, dirt turning into grass, torches dropping if their supporting block is destroyed, etc.Please note that using this event might cause quite some lag since it gets called extremely often.
		Examples:
			# prevents sand from falling
			on block physics:
				block is sand
				cancel event
		Since:
			1.4.6
		Patterns:
			[on] [block] physics
		Event values:
			event-location
			event-block
			event-world
		Cancellable: true
	On Pick Up:
		ID: pick_up
		Description:
			Called when a player picks up an item. Please note that the item is still on the ground when this event is called.
		Patterns:
			[on] [player] (pick[ ]up|picking up) [[of] %itemtypes%]
		Event values:
			event-itemstack
			event-world
			event-itementity
			event-player
		Cancellable: true
	On Pig Zap:
		ID: pig_zap
		Description:
			Called when a pig is stroke by lightning and transformed into a zombie pigman. Cancel the event to prevent the transformation.
		Since:
			1.0
		Patterns:
			[on] pig[ ]zap
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Piston Extend:
		ID: piston_extend
		Description:
			Called when a piston is about to extend.
		Since:
			1.0
		Patterns:
			[on] piston extend[ing]
		Event values:
			event-location
			event-block
			event-world
		Cancellable: true
	On Piston Retract:
		ID: piston_retract
		Description:
			Called when a piston is about to retract.
		Since:
			1.0
		Patterns:
			[on] piston retract[ing]
		Event values:
			event-location
			event-block
			event-world
		Cancellable: true
	On Place:
		ID: place
		Description:
			Called when a player places a block.
		Examples:
			on place
			on place of a furnace, workbench or chest
		Since:
			1.0
		Patterns:
			[on] [block] (plac(e|ing)|build[ing]) [[of] %itemtypes%]
		Event values:
			past event-block
			event-location
			event-block
			event-world
			event-entity
			event-player
		Cancellable: true
	On Portal:
		ID: portal
		Description:
			Called when a player uses a nether or end portal. Cancel the event to prevent the player from teleporting.
		Since:
			1.0
		Patterns:
			[on] [player] portal
		Event values:
			event-block
			event-world
			event-player
		Cancellable: true
	On Portal Create:
		ID: portal_create
		Description:
			Called when a portal is created, either by a player or mob lighting an obsidian frame on fire, or by a nether portal creating its teleportation target in the nether/overworld.
			Please note that it's not possible to use the player in this event.
		Since:
			1.0
		Patterns:
			[on] portal create
		Event values:
			event-world
		Cancellable: true
	On Portal Enter:
		ID: portal_enter
		Description:
			Called when a player enters a nether portal and the swirly animation starts to play.
		Since:
			1.0
		Patterns:
			[on] portal enter
			[on] entering [a] portal
		Event values:
			event-entity
			event-world
		Cancellable: false
	On Prepare Craft:
		ID: prepare_craft
		Description:
			Called just before displaying crafting result to player. Note that setting the result item might or might not work due to Bukkit bugs.
		Since:
			2.2-Fixes-V10
		Patterns:
			[on] [player] (preparing|beginning) craft[ing] [[of] %itemtypes%]
		Event values:
			event-slot
			event-itemstack
			event-inventory
			event-player
			event-recipe
		Cancellable: false
	On Pressure Plate / Trip:
		ID: pressure_plate_trip
		Description:
			Called when a player steps on a pressure plate or tripwire respectively.
		Since:
			1.0 (pressure plate), 1.4.4 (tripwire)
		Patterns:
			[on] [step[ping] on] [a] [pressure] plate
			[on] (trip|[step[ping] on] [a] tripwire)
		Event values:
			event-block
			event-itemstack
			event-world
			event-player
		Cancellable: true
	On Projectile Hit:
		ID: projectile_hit
		Description:
			Called when a projectile hits an entity or a block.
			Use the damage event with a check for a projectile to be able to use the entity that got hit in the case when the projectile hit a living entity.
			A damage event will even be fired if the damage is 0, e.g. when throwing snowballs at non-nether mobs.
		Since:
			1.0
		Patterns:
			[on] projectile hit
		Event values:
			event-projectile
		Cancellable: false
	On Quit:
		ID: quit
		Description:
			Called when a player leaves the server. Starting with Skript 2.0 this also includes kicked players.
		Since:
			1.0
		Patterns:
			[on] (quit[ting]|disconnect[ing]|log[ ]out|logging out)
		Event values:
			event-world
			event-player
		Cancellable: false
	On Redstone:
		ID: redstone
		Description:
			Called when the redstone current of a block changes. This event is of not much use yet.
		Since:
			1.0
		Patterns:
			[on] redstone [current] [chang(e|ing)]
		Event values:
			event-location
			event-block
			event-world
		Cancellable: false
	On Region Enter/Leave:
		ID: region_enterleave
		Description:
			Called when a player enters or leaves a region.
			This event requires a supported regions plugin to be installed.
		Examples:
			on region exit:
				message "Leaving %region%."
		Since:
			2.1
		Patterns:
			[on] (0¦enter[ing]|1¦leav(e|ing)|1¦exit[ing]) [of] ([a] region|[[the] region] %-regions%)
			[on] region (0¦enter[ing]|1¦leav(e|ing)|1¦exit[ing])
		Event values:
			event-region
			event-player
		Cancellable: true
	On Respawn:
		ID: respawn
		Description:
			Called when a player respawns. You should prefer this event over the death event as the player is technically alive when this event is called.
		Since:
			1.0
		Patterns:
			[on] [player] respawn[ing]
		Event values:
			event-world
			event-player
		Cancellable: false
	On Script Load/Unload:
		ID: script_loadunload
		Description:
			Called directly after the trigger is loaded, or directly before the whole script is unloaded.
		Examples:
			on load:
				set {running.%script%} to true
			on unload:
				set {running.%script%} to false
		Since:
			2.0
		Patterns:
			[on] [script] (load|init|enable)
			[on] [script] (unload|stop|disable)
		Event values:
			none
		Cancellable: false
	On Server Ping:
		ID: server_ping
		Patterns:
			[on] [server] [list] ping
		Event values:
			event-string
		Cancellable: false
	On Server Start/Stop:
		ID: server_startstop
		Description:
			Called when the server starts or stops (actually, when Skript starts or stops, so a /reload will trigger these events as well).
		Examples:
			on Skript start
			on server stop
		Since:
			2.0
		Patterns:
			[on] (0¦server|1¦skript) (start|load|enable)
			[on] (0¦server|1¦skript) (stop|unload|disable)
		Event values:
			none
		Cancellable: false
	On Sheep Dye:
		ID: sheep_dye
		Patterns:
			[on] sheep dye
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Sheep Regrow Wool:
		ID: sheep_regrow_wool
		Description:
			Called when sheep regrows it's sheared wool back.
		Since:
			2.2-dev21
		Patterns:
			[on] sheep [re]grow[ing] wool
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Shoot:
		ID: shoot
		Description:
			Called whenever a projectile is shot. Use the shooter expression to get who shot the projectile.
		Since:
			1.0
		Patterns:
			[on] [projectile] shoot
		Event values:
			event-projectile
		Cancellable: true
	On Sign Change:
		ID: sign_change
		Description:
			As signs are placed empty, this event is called when a player is done editing a sign.
		Examples:
			on sign change:
				line 2 is empty
				set line 1 to "<red>%line 1%"
		Since:
			1.0
		Patterns:
			[on] sign (chang[e]|edit)[ing]
			[on] [player] (chang[e]|edit)[ing] [a] sign
		Event values:
			event-location
			event-block
			event-world
			event-player
		Cancellable: true
	On Smelt:
		ID: smelt
		Description:
			Called when a furnace smelts an item in its ore slot.
		Since:
			1.0
		Patterns:
			[on] [ore] smelt[ing]
			[on] smelt[ing] of ore
		Event values:
			event-location
			event-block
			event-world
		Cancellable: true
	On Sneak Toggle:
		ID: sneak_toggle
		Description:
			Called when a player starts or stops sneaking. Use is sneaking to get whether the player was sneaking before the event was called.
		Examples:
			# make players that stop sneaking jump
			on sneak toggle:
				player was sneaking
				push the player upwards at speed 0.5
		Since:
			1.0
		Patterns:
			[on] [player] toggl(e|ing) sneak
			[on] [player] sneak toggl(e|ing)
		Event values:
			event-world
			event-player
		Cancellable: true
	On Spawn:
		ID: spawn
		Description:
			Called when an creature spawns.
		Examples:
			on spawn of a zombie
			on spawn of an ender dragon:
				broadcast "A dragon has been sighted in %world%!"
		Since:
			1.0
		Patterns:
			[on] spawn[ing] [of %entitydatas%]
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Spawn Change:
		ID: spawn_change
		Description:
			Called when the spawn point of a world changes.
		Since:
			1.0
		Patterns:
			[on] [world] spawn change
		Event values:
			event-world
		Cancellable: false
	On Spread:
		ID: spread
		Description:
			Called when a new block forms as a result of a block that can spread, e.g. water or mushrooms.
		Since:
			1.0
		Patterns:
			[on] spread[ing]
		Event values:
			past event-block
			event-location
			event-block
			event-world
		Cancellable: true
	On Sprint Toggle:
		ID: sprint_toggle
		Description:
			Called when a player starts or stops sprinting. Use is sprinting to get whether the player was sprinting before the event was called.
		Patterns:
			[on] [player] toggl(e|ing) sprint
			[on] [player] sprint toggl(e|ing)
		Event values:
			event-world
			event-player
		Cancellable: true
	On Tame:
		ID: tame
		Description:
			Called when a player tames a wolf or ocelot. Can be cancelled to prevent the entity from being tamed.
		Since:
			1.0
		Patterns:
			[on] [entity] tam(e|ing)
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Target:
		ID: target
		Description:
			Called when a mob starts/stops following/attacking another entity, usually a player.
		Since:
			1.0
		Patterns:
			[on] [entity] target
			[on] [entity] un[-]target
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Teleport:
		ID: teleport
		Description:
			Called whenever a player is teleported, either by a nether/end portal or other means (e.g. by plugins).
		Since:
			1.0
		Patterns:
			[on] [player] teleport[ing]
		Event values:
			event-block
			event-world
			event-player
		Cancellable: true
	On Throwing of an Egg:
		ID: throwing_of_an_egg
		Description:
			Called when a player throws an egg. You can just use the shoot event in most cases, as this event is intended to support changing the hatched mob and its chance to hatch, but Skript does not yet support that.
		Since:
			1.0
		Patterns:
			[on] throw[ing] [of] [an] egg
			[on] [player] egg throw
		Event values:
			event-world
			event-player
		Cancellable: false
	On Tool Change:
		ID: tool_change
		Description:
			Called whenever a player changes his held item by selecting a different slot (e.g. the keys 1-9 or the mouse wheel), not by dropping or replacing the item in the current slot.
		Since:
			1.0
		Patterns:
			[on] [player['s]] (tool|item held|held item) chang(e|ing)
		Event values:
			event-world
			event-player
		Cancellable: true
	On Vehicle Collide With Block:
		ID: vehicle_collide_with_block
		Patterns:
			[on] vehicle (block collide|collide with block)
		Event values:
			event-block
			event-entity
			event-world
			event-entity
		Cancellable: false
	On Vehicle Collide With Entity:
		ID: vehicle_collide_with_entity
		Patterns:
			[on] vehicle (entity collide|collide with entity)
		Event values:
			event-block
			event-entity
			event-world
			event-entity
		Cancellable: false
	On Vehicle Create:
		ID: vehicle_create
		Description:
			Called when a new vehicle is created, e.g. when a player places a boat or minecart.
		Since:
			1.0
		Patterns:
			[on] vehicle create
			[on] creat(e|ing|ion of) [a] vehicle
		Event values:
			event-world
			event-entity
			event-entity
		Cancellable: false
	On Vehicle Damage:
		ID: vehicle_damage
		Description:
			Called when a vehicle gets damage. Too much damage will destroy the vehicle.
		Since:
			1.0
		Patterns:
			[on] vehicle damage
			[on] damag(e|ing) [a] vehicle
		Event values:
			event-world
			event-entity
			event-entity
		Cancellable: true
	On Vehicle Destroy:
		ID: vehicle_destroy
		Description:
			Called when a vehicle is destroyed. Any passenger will be ejected and the vehicle might drop some item(s).
		Since:
			1.0
		Patterns:
			[on] vehicle destroy
			[on] destr(oy[ing]|uction of) [a] vehicle
		Event values:
			event-world
			event-entity
			event-entity
		Cancellable: true
	On Vehicle Enter:
		ID: vehicle_enter
		Description:
			Called when an entity enters a vehicle, either deliberately (players) or by falling into them (mobs).
		Since:
			1.0
		Patterns:
			[on] vehicle enter
			[on] enter[ing] [a] vehicle
		Event values:
			event-world
			event-entity
			event-entity
		Cancellable: true
	On Vehicle Exit:
		ID: vehicle_exit
		Description:
			Called when an entity exits a vehicle.
		Since:
			1.0
		Patterns:
			[on] vehicle exit
			[on] exit[ing] [a] vehicle
		Event values:
			event-world
			event-entity
			event-livingentity
			event-entity
		Cancellable: true
	On Weather Change:
		ID: weather_change
		Description:
			Called when a world's weather changes.
		Examples:
			on weather change
			on weather change to sunny
		Since:
			1.0
		Patterns:
			[on] weather change [to %weathertypes%]
		Event values:
			event-world
		Cancellable: true
	On World Init:
		ID: world_init
		Description:
			Called when a world is initialised. As all default worlds are initialised before any scripts are loaded, this event is only called for newly created worlds.
			World management plugins might change the behaviour of this event though.
		Since:
			1.0
		Patterns:
			[on] world init
		Event values:
			event-world
		Cancellable: false
	On World Load:
		ID: world_load
		Description:
			Called when a world is loaded. As with the world init event, this event will not be called for the server's default world(s).
		Since:
			1.0
		Patterns:
			[on] world load[ing]
		Event values:
			event-world
		Cancellable: false
	On World Save:
		ID: world_save
		Description:
			Called when a world is saved to disk. Usually all worlds are saved simultaneously, but world management plugins could change this.
		Since:
			1.0
		Patterns:
			[on] world sav(e|ing)
		Event values:
			event-world
		Cancellable: false
	On World Unload:
		ID: world_unload
		Description:
			Called when a world is unloaded. This event might never be called if you don't have a world management plugin.
		Since:
			1.0
		Patterns:
			[on] world unload[ing]
		Event values:
			event-world
		Cancellable: true
	On Zombie Break Door:
		ID: zombie_break_door
		Description:
			Called when a zombie is done breaking a wooden door. Can be cancelled to prevent the zombie from breaking the door.
		Patterns:
			[on] zombie break[ing] [a] [wood[en]] door
		Event values:
			event-block
			event-itemstack
			event-entity
			event-world
		Cancellable: true
	On armorstand damage:
		ID: armorstand_damage
		Patterns:
			[on] armo[u]r stand damage
		Event values:
			event-entity
			event-player
		Cancellable: true
	On hologram (touch|click):
		ID: hologram_(touch|click)
		Patterns:
			[on] hologram (touch|click)
		Event values:
			event-player
			event-number
			event-string
		Cancellable: false
	On hologram pickup:
		ID: hologram_pickup
		Patterns:
			[on] hologram pickup
		Event values:
			event-player
			event-number
			event-string
		Cancellable: false
	Periodical:
		ID: periodical
		Description:
			An event that is called periodically. The event is used like 'every &lt;timespan&gt;', e.g. 'every second' or 'every 5 minutes'.
		Examples:
			every second
			every minecraft hour
			every tick # warning: lag!
			every minecraft day in "world"
		Since:
			1.0
		Patterns:
			every %timespan% in [world[s]] %worlds%
		Event values:
			event-world
		Cancellable: false
	Script Options Header:
		ID: script_options_header
		Patterns:
			script options
		Event values:
			none
		Cancellable: false
Conditions:
	Can Build:
		ID: CondCanBuild
		Description:
			Tests whether a player is allowed to build at a certain location.
			This condition requires a supported regions plugin to be installed.
		Examples:
			command /setblock <material>:
				description: set the block at your crosshair to a different type
				trigger:
					player cannot build at the targeted block:
						message "You do not have permission to change blocks there!"
						stop
					set the targeted block to argument
		Since:
			2.0
		Patterns:
			%players% (can|(is|are) allowed to) build %directions% %locations%
			%players% (can('t|not)|(is|are)(n't| not) allowed to) build %directions% %locations%
	Can Hold:
		ID: CondCanHold
		Description:
			Tests whether a player or a chest can hold the given item.
		Examples:
			block can hold 200 cobblestone
			player has enough space for 64 feathers
		Since:
			1.0
		Patterns:
			%inventories% (can hold|ha(s|ve) [enough] space (for|to hold)) %itemtypes%
			%inventories% (can(no|')t hold|(ha(s|ve) not|ha(s|ve)n't|do[es]n't have) [enough] space (for|to hold)) %itemtypes%
	Chance:
		ID: CondChance
		Description:
			A condition that randomly succeeds or fails.
			Valid values are between 0% and 100%, or if the percent sign is omitted between 0 and 1.
		Examples:
			chance of 50%:
				drop a diamond
			chance of {var}% # {var} between 0 and 100
			chance of {var} # {var} between 0 and 1
		Since:
			1.0
		Patterns:
			chance of %number%(1¦\%|)
	Comparison:
		ID: CondCompare
		Description:
			A very general condition, it simply compares two values. Usually you can only compare for equality (e.g. block is/isn't of &lt;type&gt;), but some values can also be compared using greater than/less than. In that case you can also test for whether an object is between two others.
			Note: This is the only element where not all patterns are shown. It has actually another two sets of similar patters, but with (was|were) or will be instead of (is|are) respectively, which check different time states of the first expression.
		Examples:
			the clicked block is a stone slab or a double stone slab
			time in the player's world is greater than 8:00
			the creature is not an enderman or an ender dragon
		Since:
			1.0
		Patterns:
			(1¦neither|) %objects% ((is|are)(|2¦(n't| not|4¦ neither)) ((greater|more|higher|bigger|larger) than|above)|\>) %objects%
			(1¦neither|) %objects% ((is|are)(|2¦(n't| not|4¦ neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)|\>=) %objects%
			(1¦neither|) %objects% ((is|are)(|2¦(n't| not|4¦ neither)) ((less|smaller) than|below)|\<) %objects%
			(1¦neither|) %objects% ((is|are)(|2¦(n't| not|4¦ neither)) (less|smaller|below) [than] or (equal to|the same as)|\<=) %objects%
			(1¦neither|) %objects% (2¦)((is|are) (not|4¦neither)|isn't|aren't|!=) [equal to] %objects%
			(1¦neither|) %objects% (is|are|=) [(equal to|the same as)] %objects%
			(1¦neither|) %objects% (is|are) between %objects% and %objects%
			(1¦neither|) %objects% (2¦)(is not|are not|isn't|aren't) between %objects% and %objects%
			(1¦neither|) %objects@-1% (was|were)(|2¦(n't| not|4¦ neither)) ((greater|more|higher|bigger|larger) than|above) %objects%
			(1¦neither|) %objects@-1% (was|were)(|2¦(n't| not|4¦ neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
			(1¦neither|) %objects@-1% (was|were)(|2¦(n't| not|4¦ neither)) ((less|smaller) than|below) %objects%
			(1¦neither|) %objects@-1% (was|were)(|2¦(n't| not|4¦ neither)) (less|smaller|below) [than] or (equal to|the same as) %objects%
			(1¦neither|) %objects@-1% (2¦)((was|were) (not|4¦neither)|wasn't|weren't) [equal to] %objects%
			(1¦neither|) %objects@-1% (was|were) [(equal to|the same as)] %objects%
			(1¦neither|) %objects@-1% (was|were) between %objects% and %objects%
			(1¦neither|) %objects@-1% (2¦)(was not|were not|wasn't|weren't) between %objects% and %objects%
			(1¦neither|) %objects@1% (will be|2¦(will (not|4¦neither) be|won't be)) ((greater|more|higher|bigger|larger) than|above) %objects%
			(1¦neither|) %objects@1% (will be|2¦(will (not|4¦neither) be|won't be)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
			(1¦neither|) %objects@1% (will be|2¦(will (not|4¦neither) be|won't be)) ((less|smaller) than|below) %objects%
			(1¦neither|) %objects@1% (will be|2¦(will (not|4¦neither) be|won't be)) (less|smaller|below) [than] or (equal to|the same as) %objects%
			(1¦neither|) %objects@1% (2¦)((will (not|4¦neither) be|won't be)|(isn't|aren't|is not|are not) (turning|changing) [in]to) [equal to] %objects%
			(1¦neither|) %objects@1% (will be [(equal to|the same as)]|(is|are) (turning|changing) [in]to) %objects%
			(1¦neither|) %objects@1% will be between %objects% and %objects%
			(1¦neither|) %objects@1% (2¦)(will not be|won't be) between %objects% and %objects%
	Contains:
		ID: CondContains
		Description:
			Checks whether an inventory contains the given item, a text contains another piece of text, or a list of objects (e.g. a {list variable::*}) contains another object.
		Examples:
			block contains 20 cobblestone
			player has 4 flint and 2 iron ingots
		Since:
			1.0
		Patterns:
			%inventories% ha(s|ve) %itemtypes% [in [(the[ir]|his|her|its)] inventory]
			%inventories/strings/objects% contain[s] %itemtypes/strings/objects%
			%inventories% do[es](n't| not) have %itemtypes% [in [(the[ir]|his|her|its)] inventory]
			%inventories/strings/objects% do[es](n't| not) contain %itemtypes/strings/objects%
	Damage Cause:
		ID: CondDamageCause
		Description:
			Tests what kind of damage caused a damage event. Refer to the Damage Cause type for a list of all possible causes.
		Examples:
			# make players use their potions of fire resistance whenever they take any kind of fire damage
			on damage:
				damage was caused by lava, fire or burning
				victim is a player
				victim has a potion of fire resistance
				cancel event
				apply fire resistance to the victim for 30 seconds
				remove 1 potion of fire resistance from the victim
			# prevent mobs from dropping items under certain circumstances
			on death;
				entity is not a player
				damage wasn't caused by a block explosion, an attack, a projectile, a potion, fire, burning, thorns or poison
				clear drops
		Since:
			2.0
		Patterns:
			[the] damage (was|is|has)(0¦|1¦n('|o)t) [been] (caused|done|made) by %damagecause%
	Exists/Is Set:
		ID: CondIsSet
		Description:
			Checks whether a given expression or variable is set.
		Examples:
			{teamscript.%player%.preferred team} is not set
			on damage:
				projectile exists
				broadcast "%attacker% used a %projectile% to attack %victim%!"
		Since:
			1.2
		Patterns:
			%~objects% (exist[s]|(is|are) set)
			%~objects% (do[es](n't| not) exist|(is|are)(n't| not) set)
	Has Permission:
		ID: CondPermission
		Description:
			Test whether a player has a certain permission.
		Examples:
			player has permission "skript.tree"
			victim has the permission "admin":
				send "You're attacking an admin!" to attacker
		Since:
			1.0
		Patterns:
			[%commandsenders%] (do[es]n't|don't|do[es] not) have [the] permission[s] %strings%
			[%commandsenders%] ha(s|ve) [the] permission[s] %strings%
	Has Played Before:
		ID: CondPlayedBefore
		Description:
			Checks whether a player has played on this server before. You can also use on first join if you want to make triggers for new players.
		Examples:
			player has played on this server before
			player hasn't played before
		Since:
			1.4
		Patterns:
			%offlineplayer% [(has|did)] [already] play[ed] [on (this|the) server] (before|already)
			%offlineplayer% (has not|hasn't|did not|didn't) [(already|yet)] play[ed] [on (this|the) server] (before|already|yet)
	Is Alive:
		ID: CondIsAlive
		Description:
			Checks whetehr an entity is alive. This is mostly useful to check whether an entity stored in a variable does still exist
		Examples:
			{villagerbuddy.%player%} is dead
		Since:
			2.0
		Patterns:
			%livingentities% (is|are) (1¦alive|0¦dead)
			%livingentities% (isn't|is not|aren't|are not) (1¦alive|0¦dead)
	Is Banned:
		ID: CondIsBanned
		Description:
			Checks whether a player or IP is banned.
		Examples:
			player is banned
			victim is not IP-banned
			"127.0.0.1" is banned
		Since:
			1.4
		Patterns:
			%offlineplayers/strings% (is|are) banned
			%players/strings% (is|are) IP(-| |)banned
			%offlineplayers/strings% (isn't|is not|aren't|are not) banned
			%players/strings% (isn't|is not|aren't|are not) IP(-| |)banned
	Is Blocking:
		ID: CondIsBlocking
		Description:
			Checks whether a player is blocking with his sword.
		Examples:
			victim is blocking
		Patterns:
			%players% (is|are) (blocking|defending)
			%players% (isn't|is not|aren't|are not) (blocking|defending)
	Is Burning:
		ID: CondIsBurning
		Description:
			Checks whether an entity is on fire, e.g. a zombie due to being in sunlight, or any entity after falling into lava.
		Examples:
			# increased attack against buring targets
			victim is burning:
				increase damage by 2
		Since:
			1.4.4
		Patterns:
			%entities% (is|are) (burning|ignited|on fire)
			%entities% (isn't|is not|aren't|are not) (burning|ignited|on fire)
	Is Empty:
		ID: CondIsEmpty
		Description:
			Checks whether an inventory, an inventory slot, or a text is empty.
		Examples:
			player's inventory is empty
		Patterns:
			%inventories/slots/strings% (is|are) empty
			%inventories/slots/strings% (isn't|is not|aren't|are not) empty
	Is Enchanted:
		ID: CondIsEnchanted
		Description:
			Checks whether an item is enchanted.
		Examples:
			tool of the player is enchanted with efficiency 2
			helm, chestplate, leggings or boots are enchanted
		Since:
			1.4.6
		Patterns:
			%itemtypes% (is|are) enchanted [with %-enchantmenttype%]
			%itemtypes% (isn't|is not|aren't|are not) enchanted [with %-enchantmenttype%]
	Is Flying:
		ID: CondIsFlying
		Description:
			Checks whether a player is flying
		Examples:
			player is not flying
		Since:
			1.4.4
		Patterns:
			%players% (is|are) flying
			%players% (isn't|is not|aren't|are not) flying
	Is Holding:
		ID: CondItemInHand
		Description:
			Checks whether a player is holdign a specific item. Cannot be used with endermen, use 'entity is [not] an enderman holding &lt;item type&gt;' instead.
		Examples:
			player is holding a stick
			victim isn't holding a sword of sharpness
		Since:
			1.0
		Patterns:
			[%livingentities%] ha(s|ve) %itemtypes% in hand
			[%livingentities%] (is|are) holding %itemtypes% in hand
			[%livingentities%] (ha(s|ve) not|do[es]n't have) %itemtypes%
			[%livingentities%] (is not|isn't) holding %itemtypes%
	Is Member/Owner of Region:
		ID: CondIsMember
		Description:
			Checks whether a player is a member or owner of a particular region.
			This condition requires a supported regions plugin to be installed.
		Examples:
			on region enter:
				player is the owner of the region
				message "Welcome back to %region%!"
				send "%player% just entered %region%!" to all members of the region
		Since:
			2.1
		Patterns:
			%offlineplayers% (is|are) (0¦[a] member|1¦[(the|an)] owner) of [[the] region] %regions%
			%offlineplayers% (is|are)(n't| not) (0¦[a] member|1¦[(the|an)] owner) of [[the] region] %regions%
	Is Online:
		ID: CondIsOnline
		Description:
			Checks whether a player is online.
		Examples:
			player is online
			player-argument is offline
		Since:
			1.4
		Patterns:
			%offlineplayers% ((is|are) online|(is not|isn't|are not|aren't) offline)
			%offlineplayers% ((is|are) offline|(is not|isn't|are not|aren't) online)
	Is Poisoned:
		ID: CondIsPoisoned
		Description:
			Checks whether an entity is poisoned.
		Examples:
			player is poisoned:
				cure the player from posion
				message "You have been cured!"
		Since:
			1.4.4
		Patterns:
			%livingentities% (is|are) poisoned
			%livingentities% (isn't|is not|aren't|are not) poisoned
	Is Riding:
		ID: CondIsRiding
		Description:
			Tests whether an entity is riding another or is in a vehicle.
		Examples:
			player is riding a saddled pig
		Since:
			2.0
		Patterns:
			%entities% (is|are) riding [%entitydatas%]
			%entities% (isn't|is not|aren't|are not) riding [%entitydatas%]
	Is Sleeping:
		ID: CondIsSleeping
		Description:
			Checks whether a player is sleeping.
		Examples:
			# cut your enemies' throats in their sleep >=)
			on attack:
				attacker is holding a sword
				victim is sleeping
				increase the damage by 1000
		Since:
			1.4.4
		Patterns:
			%players% (is|are) sleeping
			%players% (isn't|is not|aren't|are not) sleeping
	Is Sneaking:
		ID: CondIsSneaking
		Description:
			Checks whether a player is sneaking
		Examples:
			# prevent mobs from seeing sneaking players if they are at least 4 meters apart
			on target:
				target is sneaking
				distance of target and the entity is bigger than 4
				cancel the event
		Since:
			1.4.4
		Patterns:
			%players% (is|are) sneaking
			%players% (isn't|is not|aren't|are not) sneaking
	Is Sprinting:
		ID: CondIsSprinting
		Description:
			Checks whether a player is sprinting
		Examples:
			player is not sprinting
		Since:
			1.4.4
		Patterns:
			%players% (is|are) sprinting
			%players% (isn't|is not|aren't|are not) sprinting
	Is Wearing:
		ID: CondIsWearing
		Description:
			Checks whether a player is wearing some armour.
		Examples:
			player is wearing an iron chestplate and iron leggings
			player is wearing all diamond armour
		Since:
			1.0
		Patterns:
			%livingentities% (is|are) wearing %itemtypes%
			%livingentities% (isn't|is not|aren't|are not) wearing %itemtypes%
	Is in World:
		ID: CondIsInWorld
		Description:
			Checks whether an entity is in a specific world
		Examples:
			player is in "world"
			argument isn't in world "world_nether"
			the player is in the world of the victim
		Since:
			1.4
		Patterns:
			%entities% (is|are) in [[the] world[s]] %worlds%
			%entities% (is not|isn't|are not|aren't) in [[the] world[s]] %worlds%
	Is of Type:
		ID: CondIsOfType
		Description:
			Checks whether an item of entity is of the given type. This is mostly useful for variables, as you can use the general 'is' condition otherwise (e.g. 'victim is a creeper').
		Examples:
			tool is of type {*selected type}
			victim is of type {villager type}
		Since:
			1.4
		Patterns:
			%itemstacks/entities% (is|are) of type[s] %itemtypes/entitydatas%
			%itemstacks/entities% (isn't|is not|aren't|are not) of type[s] %itemtypes/entitydatas%
	PvP:
		ID: CondPvP
		Description:
			Checks the PvP state of a world.
		Examples:
			PvP is enabled
			PvP is disabled in "world"
		Since:
			1.3.4
		Patterns:
			(is PvP|PvP is) enabled [in %worlds%]
			(is PvP|PvP is) disabled [in %worlds%]
	Region Contains:
		ID: CondRegionContains
		Description:
			Checks whether a location is contained in a particular region.
			This condition requires a supported regions plugin to be installed.
		Examples:
			player is in the region {regions::3}
			on region enter:
				region contains {flags.%world%.red}
				message "The red flag is near!"
		Since:
			2.1
		Patterns:
			[[the] region] %regions% contain[s] %directions% %locations%
			%locations% (is|are) ([contained] in|part of) [[the] region] %regions%
			[[the] region] %regions% (do|does)(n't| not) contain %directions% %locations%
			%locations% (is|are)(n't| not) (contained in|part of) [[the] region] %regions%
	Time:
		ID: CondDate
		Description:
			Tests whether a given real time was more or less than some time span ago.
		Examples:
			command /command_with_cooldown:
				trigger:
					{command.%player%.lastused} was less than a minute ago:
						message "Please wait a minute between uses of this command."
						stop
					set {command.%player%.lastused} to now
					# ... actual command trigger here ...
		Since:
			2.0
		Patterns:
			%date% (was|were)( more|(n't| not) less) than %timespan% [ago]
			%date% (was|were)((n't| not) more| less) than %timespan% [ago]
	Weather:
		ID: CondWeather
		Description:
			Checks whether the weather in a world is of a specific type.
			I welcome any ideas how to write this condition differently.
		Examples:
			is thundering
			is raining in "world" or "world2"
		Since:
			1.0
		Patterns:
			is %weathertypes% [in %worlds%]
Effects:
	Ban:
		ID: EffBan
		Description:
			Bans/unbans a player or IP.
			Starting with Skript 2.1.1 and Bukkit 1.7.2 R0.4, one can also ban players with a reason.
		Examples:
			unban player
			ban "127.0.0.1"
			IP-ban the player because "he is an idiot"
		Since:
			1.4, 2.1.1 (ban reason)
		Patterns:
			ban %strings/offlineplayers% [(by reason of|because [of]|on account of|due to) %-string%]
			unban %strings/offlineplayers%
			ban %players% by IP [(by reason of|because [of]|on account of|due to) %-string%]
			unban %players% by IP
			IP(-| )ban %players% [(by reason of|because [of]|on account of|due to) %-string%]
			(IP(-| )unban|un[-]IP[-]ban) %players%
	Broadcast:
		ID: EffBroadcast
		Description:
			Broadcasts a message to the server.
		Examples:
			broadcast "Welcome %player% to the server!"
			broadcast "Woah! It's a message!"
		Since:
			1.0
		Patterns:
			broadcast %strings% [(to|in) %-worlds%]
	Cancel Event:
		ID: EffCancelEvent
		Description:
			Cancels the event (e.g. prevent blocks from being placed, or damage being taken).
		Examples:
			on damage:
				victim is a player
				victim has the permission "skript.god"
				cancel the event
		Since:
			1.0
		Patterns:
			cancel [the] event
			uncancel [the] event
	Change: Set/Add/Remove/Delete/Reset:
		ID: EffChange
		Description:
			A very general effect that can change many expressions. Many expressions can only be set and/or deleted, while some can have things added to or removed from them.
		Examples:
			# set:
			Set the player's display name to "<red>%name of player%"
			set the block above the victim to lava
			# add:
			add 2 to the player's health # preferably use '<a href='#heal'>heal</a>' for this
			add argument to {blacklist::*}
			give a diamond pickaxe of efficiency 5 to the player
			increase the data value of the clicked block by 1
			# remove:
			remove 2 pickaxes from the victim
			subtract 2.5 from {points.%player%}
			# remove all:
			remove every iron tool from the player
			remove all minecarts from {entitylist::*}
			# delete:
			delete the block below the player
			clear drops
			delete {variable}
			# reset:
			reset walk speed of player
			reset chunk at the targeted block
		Since:
			1.0 (set, add, remove, delete), 2.0 (remove all)
		Patterns:
			(add|give) %objects% to %~objects%
			increase %~objects% by %objects%
			give %~objects% %objects%
			set %~objects% to %objects%
			remove (all|every) %objects% from %~objects%
			(remove|subtract) %objects% from %~objects%
			reduce %~objects% by %objects%
			(delete|clear) %~objects%
			reset %~objects%
	Colour Armour:
		ID: EffColorArmor
		Description:
			Colours leather armour in a given colour. You can also use RGB codes if you feel limited with the 16 default colours. RGB codes are three numbers from 0 to 255 in the order (red, green, blue), where (0,0,0) is black and (255,255,255) is white.
		Examples:
			dye player's helmet blue
			colour the player's tool red
		Since:
			2.0
		Patterns:
			(dye|colo[u]r|paint) %slots/itemstack% %color%
			(dye|colo[u]r|paint) %slots/itemstack% (%number%, %number%, %number%)
	Command:
		ID: EffCommand
		Description:
			Executes a command. This can be useful to use other plugins in triggers.
		Examples:
			make player execute command "/suicide"
			execute console command "/say Hello everyone!"
		Since:
			1.0
		Patterns:
			[execute] [the] command %strings% [by %-commandsenders%]
			[execute] [the] %commandsenders% command %strings%
			(let|make) %commandsenders% execute [[the] command] %strings%
	Damage/Heal/Repair:
		ID: EffHealth
		Description:
			Damage/Heal/Repair an entity, or item stack.
		Examples:
			damage player by 5 hearts
			heal the player
			repair tool of player
		Since:
			1.0
		Patterns:
			damage %slots/livingentities/itemstack% by %number% [heart[s]][ with fake cause %-damagecause%]
			heal %livingentities% [by %-number% [heart[s]]]
			repair %slots/itemstack% [by %-number%]
	Delay:
		ID: Delay
		Description:
			Delays the script's execution by a given timespan. Please note that delays are not persistent, e.g. trying to create a tempban script with ban player → wait 7 days → unban player will not work if you restart your server anytime within these 7 days. You also have to be careful even when using small delays!
		Examples:
			wait 2 minutes
			halt for 5 minecraft hours
			wait a tick
		Since:
			1.4
		Patterns:
			(wait|halt) [for] %timespan%
	Drop:
		ID: EffDrop
		Description:
			Drops one or more items.
		Examples:
			on death of creeper:
				drop 1 TNT
		Since:
			1.0
		Patterns:
			drop %itemtypes/experience% [%directions% %locations%]
			drop %itemtypes/experience% [%directions% %locations%] without velocity
	Enchant/Disenchant:
		ID: EffEnchant
		Description:
			Enchant or disenchant an existing item
		Examples:
			enchant the player's tool with sharpness 5
			disenchant the player's tool
		Since:
			2.0
		Patterns:
			enchant %~itemstack% with %enchantmenttypes%
			disenchant %~itemstack%
	Equip:
		ID: EffEquip
		Description:
			Equips a player with some given armor. This will replace any armor that the player is wearing.
		Examples:
			equip player with diamond helmet
			equip player with all diamond armor
		Since:
			1.0
		Patterns:
			equip [%livingentity%] with %itemtypes%
			make %livingentity% wear %itemtypes%
	Exit:
		ID: EffExit
		Description:
			Exits a given amount of loops and conditionals, or the entire trigger.
		Examples:
			if player has any ore:
				stop
			message "%player% has no ores!"
			loop blocks above the player:
				loop-block is not air:
					exit 2 sections
				set loop-block to water
		Patterns:
			(exit|stop) [trigger]
			(exit|stop) [(1|a|the|this)] (0¦section|1¦loop|2¦conditional)
			(exit|stop) <\d+> (0¦section|1¦loop|2¦conditional)s
			(exit|stop) all (0¦section|1¦loop|2¦conditional)s
	Explosion:
		ID: EffExplosion
		Description:
			Creates an explosion of a given force. The Minecraft Wiki has an article on explosions which lists the explosion forces of TNT, creepers, etc.
			Hint: use a force of 0 to create a fake explosion that does no damage whatsoever, or use the explosion effect introduced in Skript 2.0.
			Starting with Bukkit 1.4.5 and Skript 2.0 you can use safe explosions which will damage entities but won't destroy any blocks.
		Examples:
			create an explosion of force 10 at the player
			create an explosion of force 0 at the victim
		Since:
			1.0
		Patterns:
			[(create|make)] [an] explosion (of|with) (force|strength|power) %number% [%directions% %locations%]
			[(create|make)] [a] safe explosion (of|with) (force|strength|power) %number% [%directions% %locations%]
			[(create|make)] [a] fake explosion [%directions% %locations%]
			[(create|make)] [an] explosion[ ]effect [%directions% %locations%]
	Force Respawn:
		ID: EffRespawn
		Description:
			Forces player(s) to respawn if they are dead. If this is called without delay from death event, one tick is waited before respawn attempt.
		Examples:
			on death of player:
				force event-player to respawn
		Since:
			2.2-dev21
		Patterns:
			force %players% to respawn
	Ignite/Extinguish:
		ID: EffIgnite
		Description:
			Lights entities on fire or extinguishes them.
		Examples:
			ignite the player
			extinguish the player
		Since:
			1.4
		Patterns:
			(ignite|set fire to) %entities% [for %-timespan%]
			(set|light) %entities% on fire [for %-timespan%]
			extinguish %entities%
	Kick:
		ID: EffKick
		Description:
			Kicks a player from the server.
		Examples:
			on place of TNT, lava, or obsidian:
				kick the player due to "You may not place %block%!"
				cancel the event
		Since:
			1.0
		Patterns:
			kick %players% [(by reason of|because [of]|on account of|due to) %-string%]
	Kill:
		ID: EffKill
		Description:
			Kills an entity.
			Note: This effect does not set the entitie's health to 0 (which causes issues), but damages the entity by 100 times its maximum health.
		Examples:
			kill the player
			kill all creepers in the player's world
			kill all endermen, witches and bats
		Since:
			1.0
		Patterns:
			kill %entities%
	Lightning:
		ID: EffLightning
		Description:
			Strike lightning at a given location. Can use 'ligning effect' to create a lightning that does not harm entities or start fires.
		Examples:
			strike lightning at the player
			strike lightning effect at the victim
		Since:
			1.4
		Patterns:
			(create|strike) lightning(1¦[ ]effect|) %directions% %locations%
	Log:
		ID: EffLog
		Description:
			Writes text into a .log file. Skript will write these files to /plugins/Skript/logs.
			NB: Using 'server.log' as the log file will write to the default server log. Omitting the log file altogether will log the message as '[Skript] [&lt;script&gt;.sk] &lt;message&gt;' in the server log.
		Examples:
			on place of TNT:
				log "%player% placed TNT in %world% at %location of block%" to "tnt/placement.log"
		Since:
			2.0
		Patterns:
			log %strings% [(to|in) [file[s]] %-strings%]
	Loop Version:
		ID: EffScriptOptionLoops
		Description:
			Changes loops to emulate given Skript version's behaviour.
		Examples:
			use old loops
			use new loops
		Since:
			unknown (2.2)
		Patterns:
			use[s] (1¦old|2¦new|1¦2.1.2|2¦2.2) loops
	Message:
		ID: EffMessage
		Description:
			Sends a message to the given player.
		Examples:
			message "A wild %player% appeared!"
			message "This message is a distraction. Mwahaha!"
			send "Your kill streak is %{kill streak.%player%}%." to player
			if the targeted entity exists:
				message "You're currently looking at a %type of the targeted entity%!"
		Since:
			1.0
		Patterns:
			(message|send [message]) %strings% [to %commandsenders%]
	Open/Close Inventory:
		ID: EffOpenInventory
		Description:
			Opens an inventory to a player. The player can then access and modify the inventory as if it was a chest that he just opened.
			Please note that currently 'show' and 'open' have the same effect, but 'show' will eventually show an unmodifiable view of the inventory in the future.
		Examples:
			show the victim's inventory to the player
			open the player's inventory for the player
		Since:
			2.0, 2.1.1 (closing), 2.2-Fixes-V10 (anvil)
		Patterns:
			(0¦open|1¦show) ((20¦(crafting [table]|workbench)|40¦chest|60¦anvil) (view|window|inventory|)|%-inventory%) (to|for) %players%
			close [the] inventory [view] (to|of|for) %players%
			close %players%'[s] inventory [view]
	Play Effect:
		ID: EffVisualEffect
		Description:
			Plays a visual effect at a given location or on a given entity.
			Please note that some effects can only be played on entities, e..g wolf hearts or the hurt effect, and that these are always visible to all players.
		Examples:
			play wolf hearts on the clicked wolf
			show mob spawner flames at the targeted block to the player
		Since:
			2.1
		Patterns:
			(play|show) %visualeffects% (on|%directions%) %entities/locations% [(to %-players%|in (radius|range) of %number%)]
			(play|show) %number% %visualeffects% (on|%directions%) %locations% [(to %-players%|in (radius|range) of %number%)]
	Poison/Cure:
		ID: EffPoison
		Description:
			Poison or cure a creature.
		Examples:
			poison the player
			poison the victim for 20 seconds
			cure the player from poison
		Since:
			1.3.2
		Patterns:
			poison %livingentities% [for %-timespan%]
			(cure|unpoison) %livingentities% [(from|of) poison]
	Potion Effects:
		ID: EffPotion
		Description:
			Apply or remove potion effects to/from entities.
		Examples:
			apply swiftness 2 to the player
			remove haste from the victim
			on join:
				apply potion of strength of tier {strength.%player%} to the player for 999 days
		Since:
			2.0
		Patterns:
			apply [potion of] %potioneffecttypes% [potion] [[[of] tier] %-number%] to %livingentities% [for %-timespan%]
	Push:
		ID: EffPush
		Description:
			Push entities around.
		Examples:
			push the player upwards
			push the victim downwards at speed 0.5
		Since:
			1.4.6
		Patterns:
			(push|thrust) %entities% %direction% [(at|with) (speed|velocity|force) %-number%]
	PvP:
		ID: EffPvP
		Description:
			Set the PvP state for a given world.
		Examples:
			enable PvP #(current world only)
			disable PvP in all worlds
		Since:
			1.3.4
		Patterns:
			enable PvP [in %worlds%]
			disable PVP [in %worlds%]
	Replace:
		ID: EffReplace
		Description:
			Replaces all occurrences of a given text with another text. Please note that you can only change variables and a few expressions, e.g. a message or a line of a sign.
			Starting with 2.2-dev24, you can replace items in a inventory too.
		Examples:
			replace "<item>" in {textvar} with "%item%"
			replace every "&" with "§" in line 1
			# The following acts as a simple chat censor, but it will e.g. censor mass, hassle, assassin, etc. as well:
			on chat:
				replace all "fuck", "bitch" and "ass" with "****" in the message
			 
			replace all stone and dirt in player's inventory and player's top inventory with diamond
		Since:
			2.0, 2.2-dev24 (replace in muliple strings and replace items in inventory)
		Patterns:
			replace (all|every|) %strings% in %strings% with %string%
			replace (all|every|) %strings% with %string% in %strings%
			replace (all|every|) %itemstacks% in %inventories% with %itemstack%
			replace (all|every|) %itemstacks% with %itemstack% in %inventories%
	Return:
		ID: EffReturn
		Description:
			Makes a function return a value
		Examples:
			function double(i: number) :: number:
				return 2 * {_i}
		Since:
			2.2
		Patterns:
			return %objects%
	Shear:
		ID: EffShear
		Description:
			Shears or 'un-shears' a sheep. Please note that no wool is dropped, this only sets the 'sheared' state of the sheep.
		Examples:
			on rightclick on a sheep holding a sword:
				shear the clicked sheep
		Since:
			2.0
		Patterns:
			shear %livingentities%
			un[-]shear %livingentities%
	Shoot:
		ID: EffShoot
		Description:
			Shoots a projectile (or any other entity) from a given entity.
		Examples:
			shoot an arrow
			make the player shoot a creeper at speed 10
			shoot a pig from the creeper
		Since:
			1.4
		Patterns:
			shoot %entitydatas% [from %livingentities/locations%] [(at|with) (speed|velocity) %-number%] [%-direction%]
			(make|let) %livingentities/locations% shoot %entitydatas% [(at|with) (speed|velocity) %-number%] [%-direction%]
	Spawn:
		ID: EffSpawn
		Description:
			Spawn a creature.
		Examples:
			spawn 3 creepers at the targeted block
			spawn a ghast 5 meters above the player
		Since:
			1.0
		Patterns:
			spawn %entitytypes% [%directions% %locations%]
			spawn %number% of %entitytypes% [%directions% %locations%]
	Teleport:
		ID: EffTeleport
		Description:
			Teleport an entity to a specific location.
		Examples:
			teleport the player to {homes.%player%}
			teleport the attacker to the victim
		Since:
			1.0
		Patterns:
			teleport %entities% (to|%direction%) %location%
	Toggle:
		ID: EffToggle
		Description:
			Toggle the state of a block.
		Examples:
			# use arrows to toggle switches, doors, etc.
			on projectile hit:
			    projectile is arrow
			    toggle the block at the arrow
		Since:
			1.4
		Patterns:
			(close|turn off|de[-]activate) %blocks%
			(toggle|switch) [[the] state of] %blocks%
			(open|turn on|activate) %blocks%
	Tree:
		ID: EffTree
		Description:
			Creates a tree.
			This may require that there is enough space above the given location and that the block below is dirt/grass, but it is possible that the tree will just grow anyways, possibly replacing every block in its path.
		Examples:
			grow a tall redwood tree above the clicked block
		Since:
			1.0
		Patterns:
			(grow|create|generate) tree [of type %structuretype%] %directions% %locations%
			(grow|create|generate) %structuretype% [tree] %directions% %locations%
	Vehicle:
		ID: EffVehicle
		Description:
			Makes an entity ride another entity, e.g. a minecart, a saddled pig, an arrow, etc.
		Examples:
			make the player ride a saddled pig
			make the attacker ride the victim
		Since:
			2.0
		Patterns:
			(make|let|force) %entities% [to] (ride|mount) [(in|on)] %entity/entitydatas%
			(make|let|force) %entities% [to] (dismount|(dismount|leave) (from|of|) (any|the[ir]|his|her|) vehicle[s])
			(eject|dismount) (any|the|) passenger[s] (of|from) %entities%
	op/deop:
		ID: EffOp
		Description:
			Grant/revoke a user operator state.
		Examples:
			op the player
			deop all players
		Since:
			1.0
		Patterns:
			[de[-]]op %offlineplayers%
Expressions:
	Alphabetical Sort:
		ID: ExprAlphabetList
		Description:
			Sorts given strings in alphabetical order.
		Examples:
			set {_list::*} to alphabetically sorted {_list::*
		Since:
			2.2-dev18b
		Return type: Text
		Changers:
			none
		Patterns:
			alphabetically sorted %strings%
	Altitude:
		ID: ExprAltitude
		Description:
			Effectively an alias of 'y-coordinate of …', it represents the height of some object above bedrock.
		Examples:
			on damage:
				altitude of the attacker is higher that the altitude of the victim
				set damage to damage * 1.2
		Since:
			1.4.3
		Return type: double
		Changers:
			none
		Patterns:
			[the] altitude[s] of %locations%
			%locations%'[s] altitude[s]
	Amount:
		ID: ExprAmount
		Description:
			The amount of something.
			Please note that amount of &lt;items&gt; will not return the number of items, but the number of stacks, e.g. 1 for a stack of 64 torches.
		Examples:
			message "There are %number of all players% players online!"
		Since:
			1.0
		Return type: integer
		Changers:
			none
		Patterns:
			(amount|number|size) of %objects%
	Amount of Items:
		ID: ExprAmountOfItems
		Description:
			Counts how many of a particular item type are in a given inventory.
		Examples:
			message "You have %number of ores in the player's inventory% ores in your inventory."
		Since:
			2.0
		Return type: integer
		Changers:
			none
		Patterns:
			[the] (amount|number) of %itemtypes% (in|of) %inventories%
	Argument:
		ID: ExprArgument
		Description:
			Only usable in command events. Holds the value of the nth argument given to the command, e.g. if the command "/tell &lt;player&gt; &lt;text&gt;" is used like "/tell Njol Hello Njol!" argument 1 is the player named "Njol" and argument 2 is "Hello Njol!".
			One can also use the type of the argument instead of its index to address the argument, e.g. in the above example 'player-argument' is the same as 'argument 1'.
		Examples:
			give the item-argument to the player-argument
			damage the player-argument by the number-argument
			give a diamond pickaxe to the argument
			add argument 1 to argument 2
			heal the last argument
		Since:
			1.0
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] last arg[ument][s]
			[the] arg[ument][s](-| )<(\d+)>
			[the] <(\d*1)st|(\d*2)nd|(\d*3)rd|(\d*[4-90])th> arg[ument][s]
			[the] arg[ument][s]
			[the] %*classinfo%( |-)arg[ument][( |-)<\d+>]
			[the] arg[ument]( |-)%*classinfo%[( |-)<\d+>]
	Arithmetic:
		ID: ExprArithmetic
		Description:
			Arithmetic expressions, e.g. 1+2, (2 - health of player)/3, etc.
		Examples:
			set the player's health to 10 - the player's health
			loop (argument + 2)/5 times:
				message "Two useless numbers: %loop-num*2 - 5%, %2^loop-num - 1%"
			message "You have %health of player * 2% half hearts of HP!"
		Since:
			1.4.2
		Return type: Number
		Changers:
			unknown
		Patterns:
			%number%[ ]+[ ]%number%
			%number%[ ]-[ ]%number%
			%number%[ ]*[ ]%number%
			%number%[ ]/[ ]%number%
			%number%[ ]^[ ]%number%
	Armour Slot:
		ID: ExprArmorSlot
		Description:
			A part of a player's armour, i.e. the boots, leggings, chestplate or helmet.
		Examples:
			set chestplate of the player to a diamond chestplate
			helmet of player is neither a helmet nor air # player is wearing a block, e.g. from another plugin
		Since:
			1.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (0¦boot[s]|0¦shoe[s]|1¦leg[ging][s]|2¦chestplate[s]|3¦helm[et][s]) [slot] of %livingentities%
			%livingentities%'[s] (0¦boot[s]|0¦shoe[s]|1¦leg[ging][s]|2¦chestplate[s]|3¦helm[et][s]) [slot]
	Attacked:
		ID: ExprAttacked
		Description:
			The victim of a damage event, e.g. when a player attacks a zombie this expression represents the zombie.
		Examples:
			on damage:
				victim is a creeper
				damage the attacked by 1 heart
		Since:
			1.3
		Return type: Entity
		Changers:
			unknown
		Patterns:
			[the] (attacked|damaged|victim) [<(.+)>]
	Attacker:
		ID: ExprAttacker
		Description:
			The attacker of a damage event, e.g. when a player attacks a zombie this expression represents the player.
			Please note that the attacker can also be a block, e.g. a cactus or lava, but this expression will not be set in these cases.
		Examples:
			on damage:
				attacker is a player
				health of attacker is less than or equal to 2
				damage victim by 1 heart
		Since:
			1.3
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] (attacker|damager)
	Bed:
		ID: ExprBed
		Description:
			The bed location of a player, i.e. the spawn point of a player if he ever slept in a bed and the bed still exists and is unobstructed.
		Examples:
			bed of player exists:
				teleport player the the player's bed
			else:
				teleport the player to the world's spawn point
		Since:
			2.0
		Return type: Location
		Changers:
			set
			delete
		Patterns:
			[the] bed[s] [location[s]] of %players%
			%players%'[s] bed[s] [location[s]]
	Biome:
		ID: ExprBiome
		Description:
			The biome at a certain location. Please note that biomes are only defined for x/z-columns, i.e. the altitude (y-coordinate) doesn't matter. 
		Examples:
			# damage player in deserts constantly
			every real minute:
				loop all players:
					biome at loop-player is desert
					damage the loop-player by 1
		Since:
			1.4.4
		Return type: Biome
		Changers:
			set
		Patterns:
			[the] biome (of|%direction%) %location%
			%location%'[s] biome
	Block:
		ID: ExprBlock
		Description:
			The block involved in the event, e.g. the clicked block or the placed block.
			Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'.
		Examples:
			block is ore
			set block below to air
			spawn a creeper above the block
			loop blocks in radius 4:
				loop-block is obsidian
				set loop-block to water
			block is a chest:
				clear the inventory of the block
		Since:
			1.0
		Return type: Block
		Changers:
			unknown
		Patterns:
			[the] [event-]block
	Block:
		ID: ExprBlock
		Description:
			The block involved in the event, e.g. the clicked block or the placed block.
			Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'.
		Examples:
			block is ore
			set block below to air
			spawn a creeper above the block
			loop blocks in radius 4:
				loop-block is obsidian
				set loop-block to water
			block is a chest:
				clear the inventory of the block
		Since:
			1.0
		Return type: Block
		Changers:
			unknown
		Patterns:
			[the] block %direction% [%location%]
	Block Sphere:
		ID: ExprBlockSphere
		Description:
			All blocks in a sphere around a center, mostly useful for looping.
		Examples:
			loop blocks in radius 5 around the player:
		Since:
			1.0
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			(all|the|) blocks in radius %number% [(of|around) %location%]
			(all|the|) blocks around %location% in radius %number%
	Blocks:
		ID: ExprBlocks
		Description:
			Blocks relative to other blocks or between other blocks. Can be used to get blocks relative to other blocks or for looping.
		Examples:
			loop blocks above the player:
			loop blocks between the block below the player and the targeted block:
			set the blocks below the player, the victim and the targeted block to air
		Since:
			1.0
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] blocks %direction% [%locations%]
			[the] blocks from %location% [on] %direction%
			[the] blocks from %block% to %block%
			[the] blocks between %block% and %block%
	Blocks in Region:
		ID: ExprBlocksInRegion
		Description:
			All blocks in a region.
			This expression requires a supported regions plugin to be installed.
		Examples:
			loop all blocks in the region {arena.%{faction.%player%}%}:
				clear the loop-block
		Since:
			2.1
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[(all|the)] blocks (in|of) [[the] region[s]] %regions%
	Chat Recipients:
		ID: ExprChatRecipients
		Description:
			Recipients of chat events where this is called.
		Examples:
			chat recipients
		Since:
			2.2 (unknown)
		Return type: Player
		Changers:
			add
			set
			remove
			delete
		Patterns:
			[chat][( |-)]recipients
	Chunk:
		ID: ExprChunk
		Description:
			The chunk a block, location or entity is in
		Examples:
			add the chunk at the player to {protected chunks::*}
		Since:
			2.0
		Return type: Chunk
		Changers:
			none
		Patterns:
			[the] chunk[s] (of|%-directions%) %locations%
			%locations%'[s] chunk[s]
	Click Action:
		ID: ExprClickAction
		Description:
			The click action of an inventory event. Please click on the link for more information.
		Examples:
			click action is left mouse button
		Since:
			2.2-dev20
		Return type: Click Action
		Changers:
			none
		Patterns:
			[the] click action
	Clicked Block/Entity:
		ID: ExprClicked
		Description:
			The clicked block or entity - only useful in click events
		Examples:
			message "You clicked on a %type of clicked entity%!"
			clicked block is a chest:
				show the inventory of the clicked block to the player
		Since:
			1.0
		Return type: Object
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] clicked (block|%-*itemtype/entitydata%)
	Colour of:
		ID: ExprColorOf
		Description:
			The colour of an item, can also be used to colour chat messages with "&lt;%colour of ...%&gt;this text is coloured!".
		Examples:
			on click on wool:
				message "This wool block is <%colour of block%>%colour of block%<reset>!"
				set the colour of the block to black
		Since:
			1.2
		Return type: Colour
		Changers:
			unknown
		Patterns:
			[the] colo[u]r[s] of %itemstacks/entities%
			%itemstacks/entities%'[s] colo[u]r[s]
	Coloured / Uncoloured:
		ID: ExprColoured
		Description:
			Parses &lt;colour&gt;s (including chat styles) in a message or removes any colours & chat styles from the message.
		Examples:
			on chat:
				set message to coloured message
			command /fade <player>:
				trigger:
					set display name of the player-argument to uncoloured display name of the player-argument
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			(colo[u]r-|colo[u]red )%strings%
			(un|non)[-](colo[u]r-|colo[u]red )%strings%
	Command:
		ID: ExprCommand
		Description:
			The command that caused an 'on command' event (excluding the leading slash and all arguments)
		Examples:
			# prevent any commands except for the /exit command during some game
			on command:
			{game.%player%.is playing} is true
			command is not "exit"
			message "You're not allowed to use commands during the game"
			cancel the event
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (full|complete|whole) command
			[the] command [label]
			[the] arguments
	Command Sender:
		ID: ExprCommandSender
		Description:
			The player or the console who sent a command. Mostly useful in commands and command events.
		Examples:
			make the command sender execute "/say hi!"
			on command:
				log "%executor% used command /%command% %arguments%" to "commands.log"
		Since:
			2.0
		Return type: Command Sender
		Changers:
			none
		Patterns:
			[the] [command['s]] (sender|executor)
	Compass Target:
		ID: ExprCompassTarget
		Description:
			The location a player's compass is pointing at.
		Examples:
			# make all player's compasses target a player stored in {compass target.%player%}
			every 5 seconds:
				loop all players:
					set the loop-player's compass target to location of {compass target.%loop-player%}
		Since:
			2.0
		Return type: Location
		Changers:
			set
			reset
		Patterns:
			[the] compass target of %players%
			%players%'[s] compass target
	Console:
		ID: LitConsole
		Description:
			Represents the server's console which can receive messages and execute commands
		Examples:
			execute console command "/stop"
			send "message to console" to the console
		Since:
			1.3.1
		Return type: Command Sender
		Changers:
			none
		Patterns:
			[the] (console|server)
	Coordinate:
		ID: ExprCoordinate
		Description:
			Represents a given coordinate of a location. 
		Examples:
			player's y-coordinate is smaller than 40:
				message "Watch out for lava!"
		Since:
			1.4.3
		Return type: double
		Changers:
			unknown
		Patterns:
			[the] (0¦x|1¦y|2¦z)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of %locations%
			%locations%'[s] (0¦x|1¦y|2¦z)(-| )(coord[inate]|pos[ition]|loc[ation])[s]
	Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc.:
		ID: ExprEntity
		Description:
			The entity involved in an event (an entity is a player, a creature or an inanimate object like ignited TNT, a dropped item or an arrow).
			You can use the specific type of the entity that's involved in the event, e.g. in a 'death of a creeper' event you can use 'the creeper' instead of 'the entity'.
		Examples:
			give a diamond sword of sharpness 3 to the player
			kill the creeper
			kill all powered creepers in the wolf's world
			projectile is an arrow
		Since:
			1.0
		Return type: Entity
		Changers:
			unknown
		Patterns:
			[the] [event-]<.+>
	Cursor Slot:
		ID: ExprCursorSlot
		Description:
			The item which player has on their cursor. This slot is always empty if player has no inventories open.
		Examples:
			cursor slot of player is dirt
			set cursor slot of player to 64 diamonds
		Since:
			2.2-dev17
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] cursor slot of %players%
			%players%'[s] cursor slot
	Damage:
		ID: ExprDamage
		Description:
			How much damage is done in a damage event, possibly ignoring armour, criticals and/or enchantments. Can be changed (remember that in Skript '1' is one full heart, not half a heart).
		Examples:
			increase the damage by 2
		Since:
			1.3.5
		Return type: double
		Changers:
			none
		Patterns:
			[the] damage
	Damage Cause:
		ID: ExprDamageCause
		Description:
			The damage cause of a damage event. Please click on the link for more information.
		Examples:
			damage cause is lava, fire or burning
		Since:
			2.0
		Return type: Damage Cause
		Changers:
			none
		Patterns:
			[the] damage (cause|type)
	Data Value:
		ID: ExprDurability
		Description:
			The data value of an item.
			You usually don't need this expression as you can check and set items with aliases easily, but this expression can e.g. be used to "add 1 to data of &lt;item&gt;", e.g. for cycling through all wool colours.
		Examples:
			add 1 to the data value of the clicked block
		Since:
			1.2
		Return type: short
		Changers:
			unknown
		Patterns:
			[the] ((data|damage)[s] [value[s]]|durabilit(y|ies)) of %itemstacks/slots%
			%itemstacks/slots%'[s] ((data|damage)[s] [value[s]]|durabilit(y|ies))
	Difference:
		ID: ExprDifference
		Description:
			The difference between two values, e.g. numbers, dates or times.
		Examples:
			difference between {command.%player%.lastuse} and now is smaller than a minute:
			  message "You have to wait a minute before using this command again!"
			  stop
		Since:
			1.4
		Return type: Object
		Changers:
			unknown
		Patterns:
			difference (between|of) %object% and %object%
	Direction:
		ID: ExprDirection
		Description:
			A helper expression for the direction type.
		Examples:
			thrust the player upwards
			set the block behind the player to water
			loop blocks above the player:
				set {_rand} to a random integer between 1 and 10
				set the block {_rand} meters south east of the loop-block to stone
			block in horizontal facing of the clicked entity from the player is air
			spawn a creeper 1.5 meters horizontally behind the player
			spawn a TNT 5 meters above and 2 meters horizontally behind the player
			thrust the last spawned TNT in the horizontal direction of the player with speed 0.2
			push the player upwards and horizontally forward at speed 0.5
			push the clicked entity in in the direction of the player at speed -0.5
			open the inventory of the block 2 blocks below the player to the player
			teleport the clicked entity behind the player
			grow a regular tree 2 meters horizontally behind the player
		Since:
			1.0 (basic), 2.0 (extended)
		Return type: Direction
		Changers:
			none
		Patterns:
			[%-number% [(block|met(er|re))[s]] [to the]] (2¦north[(-| |)(4¦east|5¦west)][(ward(s|ly|)|er(n|ly|))] [of]|3¦south[(-| |)(11¦east|10¦west)][(ward(s|ly|)|er(n|ly|))] [of]|(4¦east|5¦west)[(ward(s|ly|)|er(n|ly|))] [of]|0¦above|0¦over|(0¦up|1¦down)[ward(s|ly|)]|1¦below|1¦under[neath]|1¦beneath) [%-direction%]
			[%-number% [(block|met(er|re))[s]]] in [the] (0¦direction|1¦horizontal direction|2¦facing|3¦horizontal facing) of %entity/block% (of|from|)
			[%-number% [(block|met(er|re))[s]]] in %entity/block%'[s] (0¦direction|1¦horizontal direction|2¦facing|3¦horizontal facing) (of|from|)
			[%-number% [(block|met(er|re))[s]]] (0¦in[ ]front [of]|0¦forward[s]|2¦behind|2¦backwards|[to the] (1¦right|-1¦left) [of])
			[%-number% [(block|met(er|re))[s]]] horizontal[ly] (0¦in[ ]front [of]|0¦forward[s]|2¦behind|2¦backwards|to the (1¦right|-1¦left) [of])
	Distance:
		ID: ExprDistance
		Description:
			The distance between two points.
		Examples:
			distance between the player and {%player%.home} is smaller than 20:
				message "You're very close to your home!"
		Since:
			1.0
		Return type: double
		Changers:
			none
		Patterns:
			[the] distance between %location% and %location%
	Drops:
		ID: ExprDrops
		Description:
			Only works in death events. Holds the drops of the dying creature. Drops can be prevented by removing them with "remove ... from drops", e.g. "remove all pickaxes from the drops", or "clear drops" if you don't want any drops at all.
		Examples:
			clear drops
			remove 4 planks from the drops
		Since:
			1.0
		Return type: Item / Material
		Changers:
			unknown
		Patterns:
			[the] drops
	Element of:
		ID: ExprElement
		Description:
			The first, last or a random element of a set, e.g. a list variable.
			See also: random
		Examples:
			give a random element out of {free items::*} to the player
		Since:
			2.0
		Return type: Object
		Changers:
			unknown
		Patterns:
			(-1¦[the] first|1¦[the] last|0¦[a] random) element [out] of %objects%
	Enchantment Level:
		ID: ExprEnchantmentLevel
		Description:
			The level of a particular enchantment on an item
		Examples:
			player' tool is a sword of sharpness:
				message "You have a sword of sharpness %level of sharpness of the player's tool% equipped"
		Since:
			2.0
		Return type: integer
		Changers:
			none
		Patterns:
			[the] (%-enchantment% level|level of [[the] enchant[ment]] %-enchantment%) o(f|n) %itemtypes%
			%itemtypes%'[s] (%-enchantment% level|level of [[the] enchant[ment]] %-enchantment%)
	Ender Chest:
		ID: ExprEnderChest
		Description:
			The ender chest of a player
		Examples:
			open the player's ender chest to the player
		Since:
			2.0
		Return type: Inventory
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] ender[ ]chest[s] of %players%
			%players%'[s] ender[ ]chest[s]
	Entities:
		ID: ExprEntities
		Description:
			all entities in all world, in a specific world or in a radius around a certain location, e.g. 'all players', 'all creepers in the player's world', or 'players in radius 100 of the player'.
		Examples:
			kill all creepers in the player's world
			send "Psst!" to all players witin 100 meters of the player
			give a diamond to all ops
			heal all tamed wolves in radius 2000 around {town center}
		Since:
			1.2.1
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[all] %*entitydatas% [(in|of) [world[s]] %-worlds%]
			[all] entities of type[s] %entitydatas% [(in|of) [world[s]] %-worlds%]
			[all] %*entitydatas% (within|[with]in radius) %number% [(block[s]|met(er|re)[s])] (of|around) %location%
			[all] entities of type[s] %entitydatas% in radius %number% (of|around) %location%
	Experience:
		ID: ExprExperience
		Description:
			How much experience was spawned in an experience spawn event. Can be changed.
		Examples:
			on experience spawn:
				add 5 to the spawned experience
		Since:
			2.1
		Return type: Experience
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (spawned|dropped|) [e]xp[erience] [orb[s]]
	Facing:
		ID: ExprFacing
		Description:
			The facing of an entity or block, i.e. exactly north, south, east, west, up or down (unlike direction which is the exact direction, e.g. '0.5 south and 0.7 east')
		Examples:
			# makes a bridge
			loop blocks from the block below the player in the horizontal facing of the player:
				set block to cobblestone
		Since:
			1.4
		Return type: Direction
		Changers:
			unknown
		Patterns:
			[the] (1¦horizontal|) facing of %livingentities/blocks%
			%livingentities/blocks%'[s] (1¦horizontal|) facing
	Final Damage:
		ID: ExprFinalDamage
		Description:
			How much damage is done in a damage event, considering all types of damage reduction. Can NOT be changed.
		Examples:
			send "%final damage%" to victim
		Since:
			2.2-dev19
		Return type: double
		Changers:
			none
		Patterns:
			[the] final damage
	Food Level:
		ID: ExprFoodLevel
		Description:
			The food level of a player from 0 to 10. Has several aliases: food/hunger level/meter/bar. 
		Examples:
			set the player's food level to 10
		Since:
			1.0
		Return type: float
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] (food|hunger)[[ ](level|met(er|re)|bar)] [of %player%]
			%player%'[s] (food|hunger)[[ ](level|met(er|re)|bar)]
			feed [the] %player%
	Former/Future State:
		ID: ExprTimeState
		Description:
			Represents the value of an expression before an event happened or the value it will have directly after the event, e.g. the old or new level respectively in a level change event.
			Note: The past, future and present states of an expression are sometimes called 'time states' of an expression.
			Note 2: If you don't specify whether to use the past or future state of an expression that has different values, its default value will be used which is usually the value after the event.
		Examples:
			on teleport:
				former world was "world_nether" # or 'world was'
				world will be "world" # or 'world after the event is'
			on tool change:
				past tool is an axe
				the tool after the event will be air
			on weather change:
				set {weather.%world%.old} to past weather
				set {weather.%world%.current} to the new weather
		Since:
			1.1
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] (former|past|old) [state] [of] %~object%
			%~object% before [the event]
			[the] (future|to-be|new) [state] [of] %~object%
			%~object%(-to-be| after[(wards| the event)])
	Furnace Slot:
		ID: ExprFurnaceSlot
		Description:
			A slot of a furnace, i.e. either the ore, fuel or result slot.
			Remember to use 'block' and not 'furnace', as 'furnace' is not an existing expression.
		Examples:
			set the fuel slot of the clicked block to a lava bucket
			set the block's ore slot to 64 iron ore
			give the result of the block to the player
			clear the result slot of the block
		Since:
			1.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (0¦ore|1¦fuel|2¦result)[s] [slot[s]] of %blocks%
			%blocks%'[s] (0¦ore|1¦fuel|2¦result)[s] [slot[s]]
	Game Mode:
		ID: ExprGameMode
		Description:
			The gamemode of a player.
		Examples:
			player's gamemode is survival
			set the player's gamemode to creative
		Since:
			1.0
		Return type: Game Mode
		Changers:
			set
			reset
		Patterns:
			[the] game[ ]mode of %players%
			%players%'[s] game[ ]mode
	Glowing:
		ID: ExprGlowing
		Description:
			Indicates if targeted entity is glowing (new 1.9 effect) or not. Glowing entities can be seen through walls.
		Examples:
			set glowing of player on
		Since:
			2.2-dev18
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			[the] glowing of %entities%
			%entities%'[s] glowing
	Hash:
		ID: ExprHash
		Description:
			Hashes the given text using the MD5 algorithm. This is useful for storing passwords or IP addresses without having to store them literally.
			Please note that an MD5 hash is irreversible, i.e. you won't be able to get the original text back (which is the point of storing passwords like this). Brute-force attacks can still be performed on hashes though which can easily crack short or insecure passwords.
		Examples:
			command /setpass <text>:
				trigger:
					set {password.%player%} to hashed text-argument
			command /login <text>:
				trigger:
					{password.%player%} is hashed text-argument:
						message "login successful."
					else:
						message "wrong password!"
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			[md5]( |-)hash(ed|[( |-|)code] of) %strings%
	Head location:
		ID: ExprEyeLocation
		Description:
			The location of an entity's head, mostly useful for players and e.g. looping blocks in the player's line of sight.
			Please note that this location is only accurate for entities whose head is exactly above their center, i.e. players, endermen, zombies, skeletons, etc., but not sheep, pigs or cows.
		Examples:
			set the block at the player's head to air
			set the block in front of the player's eyes to glass
			loop blocks in front of the player's head:
		Since:
			2.0
		Return type: Location
		Changers:
			none
		Patterns:
			[the] (head|eye[s]) [location[s]] of %livingentities%
			%livingentities%'[s] (head|eye[s]) [location[s]]
	Health:
		ID: ExprHealth
		Description:
			The health of a creature, e.g. a player, mob, villager, etc. from 0 to the creature's max health, e.g. 10 for players.
		Examples:
			message "You have %health% HP left."
		Since:
			1.0
		Return type: double
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] health of %livingentities%
			%livingentities%'[s] health
	IP:
		ID: ExprIP
		Description:
			The IP address of a player.
		Examples:
			IP-ban the player # is equal to the next line
			ban the IP-address of the player
			broadcast "Banned the IP %IP of player%"
		Since:
			1.4
		Return type: Text
		Changers:
			none
		Patterns:
			IP[s][( |-)address[es]] of %players%
			%players%'[s] IP[s][( |-)address[es]]
	Id:
		ID: ExprIdOf
		Description:
			The id of a specific item. You usually don't need this expression as you can likely do everything with aliases.
		Examples:
			message "the ID of %type of the clicked block% is %id of the clicked block%."
		Since:
			1.0
		Return type: integer
		Changers:
			unknown
		Patterns:
			[the] id(1¦s|) of %itemtype%
			%itemtype%'[s] id(1¦s|)
	Index Of:
		ID: ExprIndexOf
		Description:
			The first or last index of a character (or text) in a text, or -1 if it doesn't occur in the text. Indices range from 1 to the length of the text.
		Examples:
			set {_@} to the first index of "@" in the text argument
			if {_s} contains "abc":
				set {_s} to the first (index of "abc" in {_s} + 3) characters of {_s} # removes everything after the first "abc" from {_s}
		Since:
			2.1
		Return type: integer
		Changers:
			none
		Patterns:
			[the] (0¦|0¦first|1¦last) index of %string% in %string%
	Inventory:
		ID: ExprInventory
		Description:
			The inventory of a block or player. You can usually omit this expression and can directly add or remove items to/from blocks or players.
		Examples:
			add a plank to the player's inventory
			clear the player's inventory
			remove 5 wool from the inventory of the clicked block
		Since:
			1.0
		Return type: Inventory
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] inventor(y|ies) of %inventoryholders%
			%inventoryholders%'[s] inventor(y|ies)
	Inventory Action:
		ID: ExprInventoryAction
		Description:
			The inventory action of an inventory event. Please click on the link for more information.
		Examples:
			inventory action is pickup all
		Since:
			2.2-dev16
		Return type: Inventory Action
		Changers:
			none
		Patterns:
			[the] inventory action
	Inventory Slot:
		ID: ExprInventorySlot
		Description:
			Represents a slot in a inventory. It can be used to change the item in a inventory too.
		Examples:
			if slot 0 of player is air:
				set slot 0 of player to 2 stones
				remove 1 stone from slot 0 of player
				add 2 stones to slot 0 of player
				clear slot 1 of player
		Since:
			2.2-dev24
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] slot %number% of %inventory%
			%inventory%'[s] slot %number%
	Item:
		ID: ExprItem
		Description:
			The item involved in an event, e.g. in a drop, dispense, pickup or craft event.
		Examples:
			on dispense:
				item is a clock
				set the time to 6:00
		Return type: Item / Material
		Changers:
			none
		Patterns:
			[the] item
	Item Amount:
		ID: ExprItemAmount
		Description:
			Gets the amount of an item stack.
		Examples:
			send "You have got %item amount of player's tool% %player's tool% in your hand !" to player
		Since:
			2.2-dev24
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			item[[ ]stack] (amount|size|number) of %itemstack%
	Items:
		ID: ExprItems
		Description:
			Items or blocks of a specific type, useful for looping.
		Examples:
			loop items of type ore and log:
				block contains loop-item
				message "Theres at least one %loop-item% in this block"
			drop all blocks at the player # drops one of every block at the player
		Return type: Item / Material
		Changers:
			none
		Patterns:
			[(all|every)] item(s|[ ]types)
			items of type[s] %itemtypes%
			[(all|every)] block(s|[ ]types)
			blocks of type[s] %itemtypes%
	Items In:
		ID: ExprItemsIn
		Description:
			All items in an inventory. Useful for looping or storing in a list variable.
			Please note that the positions of the items in the inventory are not saved, only their order is preserved.
		Examples:
			loop all items in the player's inventory:
				loop-item is enchanted
				remove loop-item from the player
			set {inventory.%player%} to items in the player's inventory
		Since:
			2.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[all] items (in|of|contained in|out of) (|1¦inventor(y|ies)) %inventories%
	Join & Split:
		ID: ExprJoinSplit
		Description:
			Joins several texts with a common delimiter (e.g. ", "), or splits a text into multiple texts at a given delimiter.
		Examples:
			message "Online players: %join all players with " | "%" # %all players% would use the default "x, y, and z"
			set {_s::} to the string argument split at ","
		Since:
			2.1
		Return type: Text
		Changers:
			none
		Patterns:
			(concat[enate]|join) %strings% [(with|using|by) [[the] delimiter] %-string%]
			split %string% (at|using|by) [[the] delimiter] %string%
			%string% split (at|using|by) [[the] delimiter] %string%
	Last Damage Cause:
		ID: ExprLastDamageCause
		Description:
			Cause of last damage done to an entity
		Examples:
			set last damage cause of event-entity to fire tick
		Since:
			2.2-Fixes-V10
		Return type: Damage Cause
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] last damage cause of %livingentities%
			%livingentities%'[s] last damage cause
	Last Spawned Entity:
		ID: ExprLastSpawnedEntity
		Description:
			Holds the entity that was spawned most recently with the spawn effect, or shot with the shoot effect. Please note that even though you can spawn multiple mobs simultaneously (e.g. with 'spawn 5 creepers'), only the last spawned mob is saved and can be used. If you spawn an entity and shoot a projectile you can however access both.
		Examples:
			spawn a priest
			set {%spawned priest%.healer} to true
			shoot an arrow from the last spawned entity
			ignite the shot projectile
		Since:
			1.3 (spawned entity), 2.0 (shot entity)
		Return type: Entity
		Changers:
			unknown
		Patterns:
			[the] [last[ly]] (0¦spawned|1¦shot) %*entitydata%
	Length:
		ID: ExprLength
		Description:
			The length of a text, in number of characters.
		Examples:
			set {_l} to length of the string argument
		Since:
			2.1
		Return type: integer
		Changers:
			none
		Patterns:
			[the] length of %strings%
			%strings%'[s] length
	Level:
		ID: ExprLevel
		Description:
			The level of a player.
		Examples:
			reduce the victim's level by 1
			set the player's level to 0
		Return type: integer
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] level of %players%
			%players%'[s] level
	Level Progress:
		ID: ExprLevelProgress
		Description:
			The progress a player has made until the next level. Remember that this value is between 0 and 1, not 0 and 100!
			Changing this value can cause a player's level to change if the resulting level progess is negative or larger than 1, e.g.increase the player's level progress by 0.5 will make the player gain a level if his progress was more than 50%.
		Examples:
			# use the exp bar as mana
			on rightclick with a blaze rod:
				player's level progress is larger than 0.2
				shoot a fireball from the player
				reduce the player's level progress by 0.2
			every 2 seconds:
				loop all players:
					level progress of loop-player is smaller than 0.9:
						increase level progress of the loop-player by 0.1
					else:
						set level progress of the loop-player to 0.99
			on xp spawn:
				cancel event
		Since:
			2.0
		Return type: float
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] level progress of %players%
			%players%'[s] level progress
	Light Level:
		ID: ExprLightLevel
		Description:
			Gets the light level at a certain location which ranges from 0 to 15.
			It can be separated into sunlight (15 = direct sunlight, 1-14 = indirect) and block light (torches, glowstone, etc.). The total light level of a block is the maximum of the two different light types.
		Examples:
			# set vampire players standing in bright sunlight on fire
			every 5 seconds:
				loop all players:
					{vampire.%loop-player%} is true
					sunlight level at the loop-player is greater than 10
					ignite the loop-player for 5 seconds
		Since:
			1.3.4
		Return type: byte
		Changers:
			none
		Patterns:
			[(1¦sky|1¦sun|2¦block)[ ]]light[ ]level [(of|%direction%) %location%]
	Location:
		ID: ExprLocation
		Description:
			The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location).
		Examples:
			drop 5 apples at the event-location # exactly the same as writing 'drop 5 apples'
			set {_loc} to the location 1 meter above the player
		Since:
			2.0
		Return type: Location
		Changers:
			unknown
		Patterns:
			[the] [event-](location|position)
	Location:
		ID: ExprLocation
		Description:
			The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location).
		Examples:
			drop 5 apples at the event-location # exactly the same as writing 'drop 5 apples'
			set {_loc} to the location 1 meter above the player
		Since:
			2.0
		Return type: Location
		Changers:
			unknown
		Patterns:
			[the] (location|position) %directions% [%location%]
	Location:
		ID: ExprLocationOf
		Description:
			The location of a block or entity. This not only represents the x, y and z coordinates of the location but also includes the world and the direction an entity is looking (e.g. teleporting to a saved location will make the teleported entity face the same saved direction every time).
			Please note that the location of an entity is at it's feet, use head location to get the location of the head.
		Examples:
			set {home.%player%} to the location of the player
			message "You home was set to %player's location% in %player's world%."
		Return type: Location
		Changers:
			unknown
		Patterns:
			(location|position) of %location%
			%location%'[s] (location|position)
	Location At:
		ID: ExprLocationAt
		Description:
			Allows to create a location from three coordinates and a world.
		Examples:
			set {_loc} to the location at arg-1, arg-2, arg-3 of the world arg-4
			distance between the player and the location (0, 0, 0) is less than 200
		Since:
			2.0
		Return type: Location
		Changers:
			none
		Patterns:
			[the] (location|position) [at] [(][x[ ][=[ ]]]%number%, [y[ ][=[ ]]]%number%, [and] [z[ ][=[ ]]]%number%[)] [[(in|of) [[the] world]] %world%]
	Loop value:
		ID: ExprLoopValue
		Description:
			The currently looped value.
		Examples:
			# countdown:
			loop 10 times:
				message "%11 - loop-number%"
				wait a second
			# generate a 10x10 floor made of randomly coloured wool below the player:
			loop blocks from the block below the player to the block 10 east of the block below the player:
				loop blocks from the loop-block to the block 10 north of the loop-block:
					set loop-block-2 to any wool
		Since:
			1.0
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] loop-<.+>
	Lore:
		ID: ExprLore
		Description:
			An item's lore.
		Examples:
			set the 1st line of the item's lore to "<orange>Excalibur 2.0"
		Since:
			2.1
		Return type: Text
		Changers:
			unknown
		Patterns:
			[the] lore of %itemstack/itemtype%
			%itemstack/itemtype%'[s] lore
			[the] line %number% of [the] lore of %itemstack/itemtype%
			[the] line %number% of %itemstack/itemtype%'[s] lore
			[the] %number%(st|nd|rd|th) line of [the] lore of %itemstack/itemtype%
			[the] %number%(st|nd|rd|th) line of %itemstack/itemtype%'[s] lore
	Max Health:
		ID: ExprMaxHealth
		Description:
			The maximum health of an entity, e.g. 10 for a player
		Examples:
			on join:
				set the maximum health of the player to 100
			spawn a giant
			set the last spawned entity's max health to 1000
		Since:
			2.0
		Return type: double
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] max[imum] health of %livingentities%
			%livingentities%'[s] max[imum] health
	Maximum Stack Size:
		ID: ExprMaxStack
		Description:
			The maximum stack size of the specified material, e.g. 64 for torches, 16 for buckets, and 1 for swords.
		Examples:
			send "You can only pick up %max stack size of player's tool% of %type of (player's tool)%" to player
		Since:
			2.1
		Return type: integer
		Changers:
			none
		Patterns:
			[the] max[imum] stack[[ ]size] of %itemstack%
			%itemstack%'[s] max[imum] stack[[ ]size]
	Me:
		ID: ExprMe
		Description:
			A 'me' expression that can be used in effect commands only.
		Examples:
			!heal me
			!kick myself
			!give a diamond axe to me
		Since:
			2.1.1
		Return type: Command Sender
		Changers:
			none
		Patterns:
			me
			my[self]
	Message:
		ID: ExprMessage
		Description:
			The (chat) message of a chat event, the join message of a join event, the quit message of a quit event, or the death message on a death event. This expression is mostly useful for being changed.
		Since:
			1.4.6 (chat message), 1.4.9 (join & quit messages), 2.0 (death message)
		Return type: Text
		Changers:
			set
		Patterns:
			[the] [chat( |-)]message
			[the] (join|log[ ]in)( |-)message
			[the] (quit|leave|log[ ]out|kick)( |-)message
			[the] death( |-)message
	Money:
		ID: ExprBalance
		Description:
			How much virtual money a player has (can be changed). This expression requires Vault and a compatible economy plugin to be installed.
		Examples:
			message "You have %player's money%" # the currency name will be added automatically
			remove 20$ from the player's balance # replace '$' by whatever currency you use
			add 200 to the player's account # or omit the currency alltogether
		Since:
			2.0
		Return type: Money
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] (money|balance|[bank] account) of %players%
			%players%'[s] (money|balance|[bank] account)
	Name / Display Name:
		ID: ExprName
		Description:
			Represents a player's minecraft account name, chat display name, or playerlist name, or the custom name of an item, en entity or an inventory.
			The differences between the different names are:
			<ul>
			name: Minecraft account name of a player (unmodifiable), or the custom name of an item or mob (modifiable).
			display name: The name of a player as displayed in the chat and messages, e.g. when including %player% in a message. This name can be changed freely and can include colour codes, and is shared among all plugins (e.g. chat plugins will use a changed name).
			tab list name: The name of a player used in the player lists that usually opens with the tab key. Please note that this is limited to 16 characters, including colour codes which are counted as 2 characters each, and that no two players can have the same tab list name at the same time.
			</ul>
		Examples:
			on join:
				player has permission "name.red"
				set the player's display name to "<red>[admin]<gold>%name of player%"
				set the player's tablist name to "<green>%name of player%"
			set the name of the player's tool to "Legendary Sword of Awesomeness"
		Since:
			1.4.6 (players' name & display name), <i>unknown</i> (player list name), 2.0 (item name), 2.2-dev20 (inventory name)
		Return type: Text
		Changers:
			unknown
		Patterns:
			[the] (2¦)(player|tab)[ ]list name[s] of %players%
			%players%'[s] (2¦)(player|tab)[ ]list name[s]
	Name / Display Name:
		ID: ExprName
		Description:
			Represents a player's minecraft account name, chat display name, or playerlist name, or the custom name of an item, en entity or an inventory.
			The differences between the different names are:
			<ul>
			name: Minecraft account name of a player (unmodifiable), or the custom name of an item or mob (modifiable).
			display name: The name of a player as displayed in the chat and messages, e.g. when including %player% in a message. This name can be changed freely and can include colour codes, and is shared among all plugins (e.g. chat plugins will use a changed name).
			tab list name: The name of a player used in the player lists that usually opens with the tab key. Please note that this is limited to 16 characters, including colour codes which are counted as 2 characters each, and that no two players can have the same tab list name at the same time.
			</ul>
		Examples:
			on join:
				player has permission "name.red"
				set the player's display name to "<red>[admin]<gold>%name of player%"
				set the player's tablist name to "<green>%name of player%"
			set the name of the player's tool to "Legendary Sword of Awesomeness"
		Since:
			1.4.6 (players' name & display name), <i>unknown</i> (player list name), 2.0 (item name), 2.2-dev20 (inventory name)
		Return type: Text
		Changers:
			unknown
		Patterns:
			[the] (1¦)(display|nick|chat)[ ]name[s] of %itemstacks/slots/livingentities/players/inventories%
			%itemstacks/slots/livingentities/players/inventories%'[s] (1¦)(display|nick|chat)[ ]name[s]
	Name / Display Name:
		ID: ExprName
		Description:
			Represents a player's minecraft account name, chat display name, or playerlist name, or the custom name of an item, en entity or an inventory.
			The differences between the different names are:
			<ul>
			name: Minecraft account name of a player (unmodifiable), or the custom name of an item or mob (modifiable).
			display name: The name of a player as displayed in the chat and messages, e.g. when including %player% in a message. This name can be changed freely and can include colour codes, and is shared among all plugins (e.g. chat plugins will use a changed name).
			tab list name: The name of a player used in the player lists that usually opens with the tab key. Please note that this is limited to 16 characters, including colour codes which are counted as 2 characters each, and that no two players can have the same tab list name at the same time.
			</ul>
		Examples:
			on join:
				player has permission "name.red"
				set the player's display name to "<red>[admin]<gold>%name of player%"
				set the player's tablist name to "<green>%name of player%"
			set the name of the player's tool to "Legendary Sword of Awesomeness"
		Since:
			1.4.6 (players' name & display name), <i>unknown</i> (player list name), 2.0 (item name), 2.2-dev20 (inventory name)
		Return type: Text
		Changers:
			unknown
		Patterns:
			[the] (0¦)name[s] of %itemstacks/slots/livingentities/players/inventories%
			%itemstacks/slots/livingentities/players/inventories%'[s] (0¦)name[s]
	Named Item:
		ID: ExprNamed
		Description:
			Directly names an item, useful for defining a named item in a script. If you want to (re)name existing items you can either use this expression or use set <a href='#ExprName'>name of &lt;item&gt; to &lt;text&gt;</code>.
		Examples:
			give a diamond sword of sharpness 100 named "<gold>Excalibur" to the player
			set tool of player to the player's tool named "<gold>Wand"
			set the name of the player's tool to "<gold>Wand"
		Since:
			2.0
		Return type: Item Type
		Changers:
			none
		Patterns:
			%itemtypes% (named|with name[s]) %string%
	Now:
		ID: ExprNow
		Description:
			The current system time of the server. Use time to get the Minecraft time of a world.
		Examples:
			broadcast "Current server time: %now%"
		Since:
			1.4
		Return type: Date
		Changers:
			none
		Patterns:
			now
	Numbers:
		ID: ExprNumbers
		Description:
			All numbers between two given numbers, useful for looping.
			Use 'numbers' if your start is not an integer and you want to keep the fractional part of the start number constant, or use 'integers' if you only want to loop integers.
			An integer loop from 1 to a number x can also be written as 'loop x times'.
		Examples:
			loop 5 times: # loops 1, 2, 3, 4, 5
			loop numbers from 2.5 to 5.5: # loops 2.5, 3.5, 4.5, 5.5
			loop integers from 2.9 to 5.1: # same as '3 to 5', i.e. loops 3, 4, 5
		Since:
			1.4.6
		Return type: Number
		Changers:
			none
		Patterns:
			[(all|the)] (numbers|1¦integers) (between|from) %number% (and|to) %number%
			%number% times
	Open Inventory:
		ID: ExprOpenInventory
		Description:
			Return the open inventory of a player.
			If no inventory is open, it returns the own player's crafting inventory.
		Examples:
			set slot 1 of open inventory of player to diamond sword
		Since:
			2.2-dev24
		Return type: Inventory
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (current|open|top) inventory of %player%
			%player%'[s] (current|open|top) inventory
	Parse:
		ID: ExprParse
		Description:
			Parses text as a given type, or as a given pattern.
			This expression can be used in two different ways: One which parses the entire text as a single instance of a type, e.g. as a number, and one that parses the text according to a pattern.
			If the given text could not be parsed, this expression will return nothing and the parse error will be set if some information is available.
			Some notes about parsing with a pattern:
			- The pattern must be a Skript pattern, e.g. percent signs are used to define where to parse which types, e.g. put a %number% or %items% in the pattern if you expect a number or some items there.
			- You have to save the expression's value in a list variable, e.g. set {parsed::*} to message parsed as "...".
			- The list variable will contain the parsed values from all %types% in the pattern in order. If a type was plural, e.g. %items%, the variable's value at the respective index will be a list variable, e.g. the values will be stored in {parsed::1::*}, not {parsed::1}.
		Examples:
			set {var} to line 1 parsed as number
			on chat:
				set {var::*} to message parsed as "buying %items% for %money%"
				if parse error is set:
					message "%parse error%"
				else if {var::*} is set:
					cancel event
					remove {var::2} from the player's balance
					give {var::1::*} to the player
		Since:
			2.0
		Return type: Object
		Changers:
			none
		Patterns:
			%string% parsed as (%-*classinfo%|"<.*>")
	Parse Error:
		ID: ExprParseError
		Description:
			The error which caused the last parse operation to fail, which might not be set if a pattern was used and the pattern didn't match the provided text at all.
		Examples:
			set {var} to line 1 parsed as integer
			if {var} is not set:
				parse error is set:
					message "<red>Line 1 is invalid: %last parse error%"
				else:
					message "<red>Please put an integer on line 1!"
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			[the] [last] [parse] error
	Passenger:
		ID: ExprPassenger
		Description:
			The passenger of a vehicle, or the rider of a mob.
			See also: vehicle
		Examples:
			passenger of the minecart is a creeper or a cow
			the saddled pig's passenger is a player
		Since:
			2.0
		Return type: Entity
		Changers:
			add
			set
			remove
			remove all
		Patterns:
			[the] passenger[s] of %entities%
			%entities%'[s] passenger[s]
	Prefix/Suffix:
		ID: ExprPrefixSuffix
		Description:
			The prefix or suffix as defined in the server's chat plugin.
		Examples:
			on chat:
				cancel event
				broadcast "%player's prefix%%player's display name%%player's suffix%: %message%" to the player's world
			set the player's prefix to "[<red>Admin<reset>] "
		Since:
			2.0
		Return type: Text
		Changers:
			set
		Patterns:
			[the] [chat] (1¦prefix|2¦suffix) of %players%
			%players%'[s] [chat] (1¦prefix|2¦suffix)
	Random:
		ID: ExprRandom
		Description:
			Gets a random item out of a set, e.g. a random player out of all players online.
		Examples:
			give a diamond to a random player out of all players
			give a random item out of all items to the player
		Since:
			1.4.9
		Return type: Object
		Changers:
			unknown
		Patterns:
			[a] random %*classinfo% [out] of %objects%
	Random Number:
		ID: ExprRandomNumber
		Description:
			A random number or integer between two given numbers. Use 'number' if you want any number with decimal parts, or use use 'integer' if you only want whole numbers.
			Please note that the order of the numbers doesn't matter, i.e. random number between 2 and 1 will work as well as random number between 1 and 2.
		Examples:
			set the player's health to a random number between 5 and 10
			send "You rolled a %random integer from 1 to 6%!" to the player
		Since:
			1.4
		Return type: Number
		Changers:
			none
		Patterns:
			[a] random (1¦integer|2¦number) (from|between) %number% (to|and) %number%
	Raw Name:
		ID: ExprRawName
		Description:
			Raw Minecraft material name for given item. Note that this is not guaranteed to give same results on all servers.
		Examples:
			raw name of tool of player
		Since:
			unknown (2.2)
		Return type: Text
		Changers:
			none
		Patterns:
			(raw|minecraft|vanilla) name of %itemtypes%
	Region:
		ID: ExprRegion
		Description:
			The region involved in an event.
			This expression requires a supported regions plugin to be installed.
		Examples:
			on region enter:
				region is {forbidden region}
				cancel the event
		Since:
			2.1
		Return type: Region
		Changers:
			none
		Patterns:
			[the] [event-]region
	Region Members & Owners:
		ID: ExprMembersOfRegion
		Description:
			A list of members or owners of a region.
			This expression requires a supported regions plugin to be installed.
		Examples:
			on entering of a region:
				message "You're entering %region% whose owners are %owners of region%".
		Since:
			2.1
		Return type: Offlineplayer
		Changers:
			none
		Patterns:
			(all|the|) (0¦members|1¦owner[s]) of [[the] region[s]] %regions%
			[[the] region[s]] %regions%'[s] (0¦members|1¦owner[s])
	Regions At:
		ID: ExprRegionsAt
		Description:
			All regions at a particular location.
			This expression requires a supported regions plugin to be installed.
		Examples:
			On click on a sign:
				line 1 of the clicked block is "[region info]"
				set {_regions::*} to regions at the clicked block
				if {_regions::*} is empty:
					message "No regions exist at this sign."
				else:
					message "Regions containing this sign: <gold>%{_regions::*}%<r>."
		Since:
			2.1
		Return type: Region
		Changers:
			none
		Patterns:
			[the] region(1¦s|) %direction% %locations%
	Remaining Air:
		ID: ExprRemainingAir
		Description:
			How much time a player has left underwater before starting to drown.
		Examples:
			player's remaining air is less than 3 seconds:
				send "hurry, get to the surface!" to the player
		Return type: Timespan
		Changers:
			none
		Patterns:
			[the] remaining air of %livingentities%
			%livingentities%'[s] remaining air
	Rounding:
		ID: ExprRound
		Description:
			Rounds numbers normally, up (ceiling) or down (floor) respectively
		Examples:
			set {var} to rounded health of player
			set line 1 of the block to round(1.5 * player's level)
			set {_x} to floor({_y}) - ceil({_x})
			add rounded down argument to the player's health
		Since:
			2.0
		Return type: long
		Changers:
			none
		Patterns:
			(a|the|) round[ed] down %number%
			(a|the|) round[ed] %number%
			(a|the|) round[ed] up %number%
	Saturation:
		ID: ExprSaturation
		Description:
			The saturation of a player.
		Examples:
			saturation of player is 20 #Not hungry!
		Since:
			2.2-Fixes-V10
		Return type: Number
		Changers:
			set
		Patterns:
			[the] saturation [of %players%]
	Script Name:
		ID: ExprScript
		Description:
			Holds the current script's name (the file name without '.sk').
		Examples:
			on script load:
				set {running.%script%} to true
			on script unload:
				set {running.%script%} to false
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			[the] script[['s] name]
	Shooter:
		ID: ExprShooter
		Description:
			The shooter of a projectile.
		Examples:
			shooter is a skeleton
		Since:
			1.3.7
		Return type: Living Entity
		Changers:
			add
			set
			remove
			remove all
		Patterns:
			[the] shooter [of %projectile%]
	Sign Text:
		ID: ExprSignText
		Description:
			A line of text on a sign. Can be changed, but remember that there is a 16 character limit per line (including colour codes that use 2 characters each).
		Examples:
			on rightclick on sign:
				line 2 of the clicked block is "[Heal]":
					heal the player
				set line 3 to "%player%"
		Since:
			1.3
		Return type: Text
		Changers:
			set
			delete
		Patterns:
			[the] line %number% [of %block%]
			[the] (1¦1st|1¦first|2¦2nd|2¦second|3¦3rd|3¦third|4¦4th|4¦fourth) line [of %block%]
	Skull:
		ID: ExprSkull
		Description:
			Gets a skull item representing a player or an entity.
		Examples:
			give the victim's skull to the attacker
			set the block at the entity to the entity's skull
		Since:
			2.0
		Return type: Item Type
		Changers:
			none
		Patterns:
			[the] skull of %offlineplayers/entities/entitydatas%
			%offlineplayers/entities/entitydatas%'[s] skull
	Sorted List:
		ID: ExprSortedList
		Description:
			Sorts given list in natural order. All objects in list must be comparable; usually if you think you can compare it, it can be compared.
		Examples:
			set {_list::*} to  sorted {_list::*
		Since:
			2.2-dev19
		Return type: Object
		Changers:
			none
		Patterns:
			sorted %objects%
	Spawn:
		ID: ExprSpawn
		Description:
			The spawnpoint of a world.
		Examples:
			teleport all players to spawn
			set the spawn point of "world" to the player's location
		Since:
			1.4.2
		Return type: Location
		Changers:
			set
		Patterns:
			[the] spawn[s] [(point|location)[s]] [of %worlds%]
			%worlds%'[s] spawn[s] [(point|location)[s]]
	Speed:
		ID: ExprSpeed
		Description:
			A player's walking or flying speed. Both can be changed, but values must be between -1 and 1 (excessive values will be changed to -1 or 1 respectively). Negative values reverse directions.
			Please note that changing a player's speed will change his FOV just like potions do.
		Examples:
			set the player's walk speed to 1
			increase the argument's fly speed by 0.1
		Return type: float
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] (0¦walk[ing]|1¦fl(y[ing]|ight))[( |-])speed of %players%
			%players%'[s] (0¦walk[ing]|1¦fl(y[ing]|ight))[( |-])speed
	Subtext:
		ID: ExprSubstring
		Description:
			Extracts part of a text. You can either get the first &lt;x&gt; characters, the last &lt;x&gt; characters, or the characters between indices &lt;x&gt; and &lt;y&gt;. The indices &lt;x&gt; and &lt;y&gt; should be between 1 and the length of the text (other values will be fit into this range).
		Examples:
			set {_s} to the first 5 characters of the text argument
			message "%subtext of {_s} from characters 2 to (the length of {_s} - 1)%" # removes the first and last character from {_s} and sends it to the player or console
		Since:
			2.1
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (part|sub[ ](text|string)) of %strings% (between|from) (ind(ex|ices)|character[s]|) %number% (and|to) (index|character|) %number%
			[the] (1¦first|2¦last) [%-number%] character[s] of %strings%
			[the] %number% (1¦first|2¦last) characters of %strings%
	Tamer:
		ID: ExprTamer
		Description:
			The tamer of an entity. Can only be used in entity tame events. You can use 'event-entity' to refer tamed entity itself.
		Since:
			2.2-dev25
		Return type: Player
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] tamer
	Target:
		ID: ExprTarget
		Description:
			For players this is the entity at the crosshair, while for mobs and experience orbs it represents the entity they are attacking/following (if any).
		Examples:
			on entity target:
			    entity's target is a player
			    send "You're being followed by an %entity%!" to target of entity
		Return type: Entity
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] target[[ed] %-*entitydata%] [of %livingentities%]
			%livingentities%'[s] target[[ed] %-*entitydata%]
	Targeted Block:
		ID: ExprTargetedBlock
		Description:
			The block at the crosshair. This regards all blocks that are not air as fully opaque, e.g. torches will be like a solid stone block for this expression.
		Examples:
			# A command to set the block a player looks at to a specific type:
			command /setblock <material>:
			    trigger:
			        set targeted block to argument
		Since:
			1.0
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] target[ed] block[s] [of %players%]
			%players%'[s] target[ed] block[s]
			[the] actual[ly] target[ed] block[s] [of %players%]
			%players%'[s] actual[ly] target[ed] block[s]
	Time:
		ID: ExprTime
		Description:
			The time of a world.
		Examples:
			time in world is between 18:00 and 6:00:
				broadcast "It's night-time, watch out for monsters!"
		Since:
			1.0
		Return type: Time
		Changers:
			add
			set
			remove
		Patterns:
			[the] time [(in|of) %worlds%]
			%worlds%'[s] time
	Tool:
		ID: ExprTool
		Description:
			The item a player is holding.
		Examples:
			player is holding a pickaxe
			# is the same as
			player's tool is a pickaxe
			player's off hand tool is shield #Only for Minecraft 1.9
		Since:
			1.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (off[(-| )]tool|off[(-| )][held ]item|off[(-| )]weapon) [of %livingentities%]
			%livingentities%'[s] (off[(-| )]tool|off[(-| )][held ]item|off[(-| )]weapon)
			[the] (off[ ]hand tool|off[ ] hand item|shield[ item]) [of %livingentities%]
			%livingentities%'[s] (off[ ]hand tool|off[ ] hand item|shield[ item])
	Tool:
		ID: ExprTool
		Description:
			The item a player is holding.
		Examples:
			player is holding a pickaxe
			# is the same as
			player's tool is a pickaxe
			player's off hand tool is shield #Only for Minecraft 1.9
		Since:
			1.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (tool|held item|weapon) [of %livingentities%]
			%livingentities%'[s] (tool|held item|weapon)
	Type of:
		ID: ExprTypeOf
		Description:
			The type of a block/item or entity. The type of an item is only it's id and data value, i.e. it ignores the amount, enchantments etc., and the type of an entity is e.g. 'wolf' or 'player'.
		Examples:
			on rightclick on an entity:
				message "This is a %type of clicked entity%!"
		Since:
			1.4
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] type of %entitydatas/itemstacks%
			%entitydatas/itemstacks%'[s] type
	UUID:
		ID: ExprUUID
		Description:
			The UUID of a player, entity or world.
			In the future there will be an option to use a player's UUID instead of the name in variable names (i.e. when %player% is used), but for now this can be used.
			Please note that this expression does not work for offline players if you are under 1.8!
		Examples:
			# prevents people from joining the server if they use the name of a player
			# who has played on this server at least once since this script has been added
			on login:
				{uuids.%name of player%} exists:
					{uuids.%name of player%} is not UUID of player
					kick player due to "Someone with your name has played on this server before"
				else:
					set {uuids.%name of player%} to UUID of player
		Since:
			2.1.2, 2.2 (offline players' UUIDs), 2.2-dev24 (other entities' UUIDs)
		Return type: Text
		Changers:
			none
		Patterns:
			[the] UUID of %offlineplayers/worlds/entities%
			%offlineplayers/worlds/entities%'[s] UUID
	Unbreakable Items:
		ID: ExprUnbreakable
		Description:
			Creates unbreakable copies of given items.
		Examples:
			unbreakable iron sword #Creates unbreakable iron sword
		Since:
			2.2-dev13b
		Return type: Item Type
		Changers:
			none
		Patterns:
			unbreakable %itemtypes%
	Unix Timestamp:
		ID: ExprUnixTime
		Description:
			Converts real world date to Unix timestamp (yyyy-MM-dd HH:mm:ss z).
		Examples:
			unix time of now
		Since:
			2.2-dev20
		Return type: Text
		Changers:
			none
		Patterns:
			[the] [unix] time[stamp] of %dates%
			%dates%'[s] [unix] time[stamp]
	Upper/lower Case Text:
		ID: ExprStringCase
		Description:
			Copy of given text in upper or lower case.
		Examples:
			"oops!" in upper case # OOPS!
		Since:
			2.2-dev16
		Return type: Text
		Changers:
			none
		Patterns:
			%string% in (0¦upper|1¦lower) case
			capitalized %string%
	Vehicle:
		ID: ExprVehicle
		Description:
			The vehicle an entity is in, if any. This can actually be any entity, e.g. spider jockeys are skeletons that ride on a spider, so the spider is the 'vehicle' of the skeleton.
			See also: passenger
		Examples:
			vehicle of the player is a minecart
		Since:
			2.0
		Return type: Entity
		Changers:
			add
			set
			remove
			remove all
		Patterns:
			[the] vehicle[s] of %entities%
			%entities%'[s] vehicle[s]
	Version:
		ID: ExprVersion
		Description:
			The version of Bukkit, Minecraft or Skript respectively.
		Examples:
			message "This server is running Minecraft %minecraft version% on Bukkit %bukkit version%"
			message "This server is powered by Skript %skript version%"
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			(0¦[craft]bukkit|1¦minecraft|2¦skript)( |-)version
	Weather:
		ID: ExprWeather
		Description:
			The weather in the given or the current world.
		Examples:
			set weather to clear
			weather in "world" is rainy
		Since:
			1.0
		Return type: Weather Type
		Changers:
			set
			delete
		Patterns:
			[the] weather [(in|of) %worlds%]
			%worlds%'[s] weather
	World:
		ID: ExprWorld
		Description:
			The world the event occurred in.
		Examples:
			world is "world_nether"
			teleport the player to the world's spawn
			set the weather in the player's world to rain
		Since:
			1.0
		Return type: World
		Changers:
			none
		Patterns:
			[the] world [of %location/entity%]
			%location/entity%['s] world
	Worlds:
		ID: ExprWorlds
		Description:
			All worlds of the server, useful for looping.
		Examples:
			loop all worlds:
				broadcast "You're in %loop-world%" to loop-world
		Since:
			1.0
		Return type: World
		Changers:
			none
		Patterns:
			[(the|all)] worlds
	X of Item:
		ID: ExprXOf
		Description:
			An expression to be able to use a certain amount of items where the amount can be any expression. Please note that is expression is not stable and might be replaced in the future.
		Examples:
			give level of player of pickaxes to the player
		Since:
			1.2
		Return type: Object
		Changers:
			unknown
		Patterns:
			%number% of %itemstacks/entitytype%
	Yaw / Pitch:
		ID: ExprYawPitch
		Description:
			The yaw or pitch of a location. You likely won't need this expression ever if you don't know what this means.
		Examples:
			log "%player%: %location of player%, %player's yaw%, %player's pitch%" to "playerlocs.log"
		Since:
			2.0
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] (0¦yaw|1¦pitch) of %locations%
			%locations%'[s] (0¦yaw|1¦pitch)
Types:
	Biome:
		ID: Biome
		Description:
			All possible biomes Minecraft uses to generate a world.
		Examples:
			biome at the player is desert
		Usage: Biome names; you can use F3 ingame
		Since:
			1.4.4
		Patterns:
			biome[s]
	Block:
		ID: Block
		Description:
			A block in a world. It has a location and a type, and can also have a direction (mostly a facing), an inventory, or other special properties.
		Since:
			1.0
		Patterns:
			block[s]
	Boolean:
		ID: Boolean
		Description:
			A boolean is a value that is either true or false. Other accepted names are 'on' and 'yes' for true, and 'off' and 'no' for false.
		Examples:
			set {config.%player%.use mod} to false
		Usage: true/yes/on or false/no/off
		Since:
			1.0
		Patterns:
			boolean[s]
	Chunk:
		ID: Chunk
		Description:
			A chunk is a cuboid of 16×16×128 (x×z×y) blocks. Chunks are spread on a fixed rectangular grid in their world.
		Since:
			2.0
		Patterns:
			chunk[s]
	Click Action:
		ID: ClickType
		Description:
			Click action, mostly for inventory events. Tells exactly which keys/buttons player pressed, assuming that default keybindings are used in client side.
		Usage: left mouse button, left mouse button with shift, right mouse button, right mouse button with shift, window border using right mouse button, window border using left mouse button, middle mouse button, number key, double click using mouse, drop key, drop key with control, creative action, unknown
		Since:
			2.2-dev16b
		Patterns:
			click action[s]
	Colour:
		ID: Color
		Description:
			Wool, dye and chat colours.
		Examples:
			color of the sheep is red or black
			set the colour of the block to green
			message "You're holding a <%color of tool%>%color of tool%<reset> wool block"
		Usage: black, dark grey/dark gray, grey/light grey/gray/light gray/silver, white, blue/dark blue, cyan/aqua/dark cyan/dark aqua, light blue/light cyan/light aqua, green/dark green, light green/lime/lime green, yellow/light yellow, orange/gold/dark yellow, red/dark red, pink/light red, purple/dark purple, magenta/light purple, brown/indigo
		Patterns:
			colo[u]r[s]
	Command Sender:
		ID: CommandSender
		Description:
			A player or the console.
		Examples:
			on command /pm:
				command sender is not the console
				chance of 10%
				give coal to the player
				message "You got a piece of coal for sending that PM!"
		Usage: use the console for the console
see player for players.
		Since:
			1.0
		Patterns:
			[command[s]][ ](sender|executor)[s]
	Damage Cause:
		ID: DamageCause
		Description:
			The cause/type of a damage event, e.g. lava, fall, fire, drowning, explosion, poison, etc.
			Please note that support for this type is very rudimentary, e.g. lava, fire and burning, as well as projectile and attack are considered different types.
		Usage: contact, attack, projectile, suffocation, fall, fire, burning, melting, lava, drowning, block explosion, entity explosion, void, lightning, suicide, starvation, poison, potion, wither, falling block, thorns, unknown
		Since:
			2.0
		Patterns:
			damage cause[s]
	Date:
		ID: Date
		Description:
			A date is a certain point in the real world's time which can currently only be obtained with now.
			See time and timespan for the other time types of Skript.
		Examples:
			set {_yesterday} to now
			subtract a day from {_yesterday}
			# now {_yesterday} represents the date 24 hours before now
		Since:
			1.4
		Patterns:
			date[s]
	Direction:
		ID: Direction
		Description:
			A direction, e.g. north, east, behind, 5 south east, 1.3 meters to the right, etc.
			Locations and some blocks also have a direction, but without a length.
			Please note that directions have changed extensively in the betas and might not work perfectly. They can also not be used as command arguments.
		Examples:
			set the block below the victim to a chest
			loop blocks from the block infront of the player to the block 10 below the player:
				set the block behind the loop-block to water
		Usage: see direction (expression)
		Since:
			2.0
		Patterns:
			direction[s]
	Enchantment:
		ID: Enchantment
		Description:
			An enchantment, e.g. 'sharpness' or 'furtune'. Unlike enchantment type this type has no level, but you usually don't need to use this type anyway.
		Usage: Protection, Fire Protection, Feather Falling, Blast Protection, Projectile Protection, Respiration, Aqua Affinity, Thorns, Depth Strider, Sharpness, Smite, Bane of Arthropods, Knockback, Fire Aspect, Looting, Efficiency, Silk Touch, Unbreaking, Fortune, Power, Punch, Flame, Infinity, Luck of the Sea, Lure
		Since:
			1.4.6
		Patterns:
			enchantment[s]
	Enchantment Type:
		ID: EnchantmentType
		Description:
			An enchantment with an optional level, e.g. 'sharpness 2' or 'fortune'.
		Examples:
			enchant the player's tool with sharpness 5
			helmet is enchanted with waterbreathing
		Usage: &lt;enchantment&gt; [&lt;level&gt;]
		Since:
			1.4.6
		Patterns:
			enchant(ing|ment) type[s]
	Entity:
		ID: Entity
		Description:
			An entity is something in a world that's not a block, e.g. a player, a skeleton, or a zombie, but also projectiles like arrows, fireballs or thrown potions, or special entities like dropped items, falling blocks or paintings.
		Examples:
			entity is a zombie or creeper
			player is an op
			projectile is an arrow
			shoot a fireball from the player
		Usage: player, op, wolf, tamed ocelot, powered creeper, zombie, unsaddled pig, fireball, arrow, dropped item, item frame, etc.
		Since:
			1.0
		Patterns:
			entit(y|ies)
	Entity Type:
		ID: EntityData
		Description:
			The type of an entity, e.g. player, wolf, powered creeper, etc.
		Examples:
			victim is a cow
			spawn a creeper
		Usage: Detailed usage will be added eventually
		Since:
			1.3
		Patterns:
			entity[ ]type[s]
	Game Mode:
		ID: GameMode
		Description:
			The game modes survival, creative and adventure.
		Examples:
			player's gamemode is survival
			set the player argument's game mode to creative
		Usage: creative/survival/adventure
		Since:
			1.0
		Patterns:
			game[ ]mode[s]
	Inventory:
		ID: Inventory
		Description:
			An inventory of a player or block. Inventories have many effects and conditions regarding the items contained.
			An inventory has a fixed amount of slots which represent a specific place in the inventory, e.g. the helmet slot for players (Please note that slot support is still very limited but will be improved eventually).
		Since:
			1.0
		Patterns:
			inventor(y|ies)
	Inventory Action:
		ID: InventoryAction
		Description:
			What player just did in inventory event. Note that when in creative game mode, most actions do not work correctly.
		Usage: nothing, pickup all, pickup some, pickup half, pickup one item, place all, place some, place one, swap with cursor, drop all from cursor, drop one from cursor, drop all from slot, drop one from slot, instant move, hotbar move and readd, swap with hotbar, clone stack, collect to cursor, unknown
		Since:
			2.2-dev16
		Patterns:
			inventory action[s]
	Inventory Slot:
		ID: Slot
		Description:
			Represents a single slot of an inventory. Notable slots are the armour slots and furnace slots. 
			The most important property that distinguishes a slot from an item is its ability to be changed, e.g. it can be set, deleted, enchanted, etc. (Some item expressions can be changed as well, e.g. items stored in variables. For that matter: slots are never saved to variables, only the items they represent at the time when the variable is set).
			Please note that tool can be regarded a slot, but it can actually change it's position, i.e. doesn't represent always the same slot.
		Examples:
			set tool of player to dirt
			delete helmet of the victim
			set the colour of the player's tool to green
			enchant the player's chestplate with projectile protection 5
		Patterns:
			[inventory ]slot[s]
	Item / Material:
		ID: ItemStack
		Description:
			An item, e.g. a stack of torches, a furnace, or a wooden sword of sharpness 2. Unlike item type an item can only represent exactly one item (e.g. an upside-down cobblestone stair facing west), while an item type can represent a whole range of items (e.g. any cobble stone stairs regardless of direction).
			You don't usually need this type except when you want to make a command that only accepts an exact item.
			Please note that currently 'material' is exactly the same as 'item', i.e. can have an amount & enchantments.
		Examples:
			set {_item} to type of the targeted block
			{_item} is a torch
		Usage: [&lt;number&gt; [of]] &lt;alias&gt; [of &lt;enchantment&gt; &lt;level&gt;], Where &lt;alias&gt; must be an alias that represents exactly one item (i.e cannot be a general alias like 'sword' or 'plant')
		Since:
			1.0
		Patterns:
			item
			material
	Item Type:
		ID: ItemType
		Description:
			An item type is an alias, e.g. 'a pickaxe', 'all plants', etc., and can result in different items when added to an inventory, and unlike items they are well suited for checking whether an inventory contains a certain item or whether a certain item is of a certain type.
			An item type can also have one or more enchantments with or without a specific level defined, and can optionally start with 'all' or 'every' to make this item type represent all types that the alias represents, including data ranges.
		Examples:
			give 4 torches to the player
			add all slabs to the inventory of the block
			player's tool is a diamond sword of sharpness
			remove a pickaxes of fortune 4 from {stored items::*}
			set {_item} to 10 of every upside-down stair
			block is dirt or farmland
		Usage: [&lt;number&gt; [of]] [all/every] &lt;alias&gt; [of &lt;enchantment&gt; [&lt;level&gt;] [,/and &lt;more enchantments...&gt;]]
		Since:
			1.0
		Patterns:
			item[ ]type[s]
			items
			materials
	Living Entity:
		ID: LivingEntity
		Description:
			A living entity, i.e. a mob or player, not inanimate entities like projectiles or dropped items.
		Examples:
			spawn 5 powered creepers
			shoot a zombie from the creeper
		Usage: see entity, but ignore inanimate objects
		Since:
			1.0
		Patterns:
			living[ ]entit(y|ies)
	Location:
		ID: Location
		Description:
			A location in a world. Locations are world-specific and even store a direction, e.g. if you save a location and later teleport to it you will face the exact same direction you did when you saved the location.
		Since:
			1.0
		Patterns:
			location[s]
	Money:
		ID: Money
		Description:
			A certain amount of money. Please note that this differs from numbers as it includes a currency symbol or name, but usually the two are interchangeable, e.g. you can both add 100$ to the player's balance and add 100 to the player's balance.
		Examples:
			add 10£ to the player's account
			remove Fr. 9.95 from the player's money
			set the victim's money to 0
			increase the attacker's balance by the level of the victim * 100
		Usage: &lt;number&gt; $ or $ &lt;number&gt;, where '$' is your server's currency, e.g. '10 rupees' or '£5.00'
		Since:
			2.0
		Patterns:
			money
	Number:
		ID: Number
		Description:
			A number, e.g. 2.5, 3, or -9812454.
			Please note that many expressions only need integers, i.e. will discard any frational parts of any numbers without producing an error.
		Examples:
			set the player's health to 5.5
			set {_temp} to 2*{_temp} - 2.5
		Usage: [-]###[.###] (any amount of digits; very large numbers will be truncated though)
		Since:
			1.0
		Patterns:
			num[ber][s]
	Object:
		ID: Object
		Description:
			The supertype of all types, meaning that if %object% is used in e.g. a condition it will accept all kinds of expressions.
		Since:
			1.0
		Patterns:
			object[s]
	Offlineplayer:
		ID: OfflinePlayer
		Description:
			A player that is possibly offline. See player for more information. Please note that while all effects and conditions that require a player can be used with an offline player as well, they will not work if the player is not actually online.
		Patterns:
			offline[ ]player[s]
	Player:
		ID: Player
		Description:
			A player. Depending on whether a player is online or offline several actions can be performed with them, though you won't get any errors when using effects that only work if the player is online (e.g. changing his inventory) on an offline player.
			You have two possibilities to use players as command arguments: &lt;player&gt; and &lt;offline player&gt;. The first requires that the player is online and also accepts only part of the name, while the latter doesn't require that the player is online, but the player's name has to be entered exactly.
		Since:
			1.0
		Patterns:
			player[s]
	Potion Effect Type:
		ID: PotionEffectType
		Description:
			A potion effect type, e.g. 'strength' or 'swiftness'.
		Examples:
			apply swiftness 5 to the player
			apply potion of speed 2 to the player for 60 seconds
			remove invisibility from the victim
		Usage: null, speed, slowness, haste, mining fatigue, strength, instant health, instant damage, jump boost, nausea, regeneration, resistance, fire resistance, water breathing, invisibility, blindness, night vision, hunger, weakness, poison, wither, health boost, absorption, saturation
		Patterns:
			potion[[ ]effect][[ ]type][s]
	Projectile:
		ID: Projectile
		Description:
			A projectile, e.g. an arrow, snowball or thrown potion.
		Examples:
			projectile is a snowball
			shoot an arrow at speed 5 from the player
		Usage: arrow, fireball, snowball, thrown potion, etc.
		Since:
			1.0
		Patterns:
			projectile[s]
	Region:
		ID: Region
		Description:
			A region of a regions plugin. Skript currently supports WorldGuard, Factions, GriefPrevention and PreciousStones.
			Please note that some regions plugins do not have named regions, some use numerical ids to identify regions, and some may have regions with the same name in different worlds, thus using regions like "region name" in scripts may or may not work.
		Usage: "region name"
		Since:
			2.1
		Patterns:
			region[s]
	Text:
		ID: String
		Description:
			Text is simply text, i.e. a sequence of characters, which can optionally contain expressions which will be replaced with a meaningful representation (e.g. %player% will be replaced with the player's name).
			Because scripts are also text, you have to put text into double quotes to tell Skript which part of the line is an effect/expression and which part is the text.
			Please read the article on Texts and Variable Names to learn more.
		Examples:
			broadcast "Hello World!"
			message "Hello %player%"
			message "The id of ""%type of tool%"" is %id of tool%."
		Usage: simple: "..."
quotes: "...""..."
expressions: "...%expression%..."
percent signs: "...%%..."
		Since:
			1.0
		Patterns:
			(text|string)[s]
	Time:
		ID: Time
		Description:
			A time is a point in a minecraft day's time (i.e. ranges from 0:00 to 23:59), which can vary per world.
			See date and timespan for the other time types of Skript.
		Examples:
			at 20:00:
				time is 8 pm
				broadcast "It's %time%"
		Usage: ##:##
##[:##][ ]am/pm
		Since:
			1.0
		Patterns:
			time[s]
	Timeperiod:
		ID: Timeperiod
		Description:
			A period of time between two times. Mostly useful since you can use this to test for whether it's day, night, dusk or dawn in a specific world.
			This type might be removed in the future as you can use 'time of world is between x and y' as a replacement.
		Examples:
			time in world is night
		Usage: ##:## - ##:##
dusk/day/dawn/night
		Since:
			1.0
		Patterns:
			time[ ]period[s]
			duration[s]
	Timespan:
		ID: Timespan
		Description:
			A timespan is a difference of two different dates or times, e.g '10 minutes'. Timespans are always displayed as real life time, but can be defined as minecraft time, e.g. '5 minecraft days and 12 hours'.
			See date and time for the other time types of Skript.
		Examples:
			every 5 minecraft days:
				wait a minecraft second and 5 ticks
			every 10 mc days and 12 hours:
				halt for 12.7 irl minutes, 12 hours and 120.5 seconds
		Usage: &lt;number&gt; [minecraft/mc/real/rl/irl] ticks/seconds/minutes/hours/days [[,/and] &lt;more...&gt;]
[###:]##:##[.####] ([hours:]minutes:seconds[.milliseconds])
		Since:
			1.0
		Patterns:
			time[ ]span[s]
	Tree Type:
		ID: StructureType
		Description:
			A tree type represents a tree species or a huge mushroom species. These can be generated in a world with the generate tree effect.
		Examples:
			grow any regular tree at the block
			grow a huge red mushroom above the block
		Usage: [any] &lt;general tree/mushroom type&gt;, e.g. tree/any jungle tree/etc.
&lt;specific tree/mushroom species&gt;, e.g. red mushroom/small jungle tree/big regular tree/etc.
		Patterns:
			tree[ ]type[s]
			tree[s]
	Type:
		ID: ClassInfo
		Description:
			Represents a type, e.g. number, object, item type, location, block, world, entity type, etc.
			This is mostly used for expressions like 'event-&lt;type&gt;', '&lt;type&gt;-argument', 'loop-&lt;type&gt;', etc., e.g. event-world, number-argument and loop-player.
		Examples:
			{variable} is a number # check whether the variable contains a number, e.g. -1 or 5.5
			{variable} is a type # check whether the variable contains a type, e.g. number or player
			{variable} is an object # will always succeed if the variable is set as everything is an object, even types.
			disable PvP in the event-world
			kill the loop-entity
		Usage: See the type name patterns of all types - including this one
		Since:
			2.0
		Patterns:
			type[s]
	Vector:
		ID: Vector
		Description:
			Vector is a collection of numbers. In Minecraft, 3D vectors are used to express velocities of entities.
		Usage: vector(x, y, z)
		Since:
			2.2-dev23
		Patterns:
			vector[s]
	Visual Effect:
		ID: VisualEffect
		Description:
			A visible effect, e.g. particles.
		Examples:
			show wolf hearts on the clicked wolf
			play mob spawner flames at the targeted block to the player
		Usage: ender signal, mobspawner flames, potion break, smoke, hurt, sheep eating, wolf hearts, wolf shaking, wolf smoke, firework's spark, critical hit, magical critical hit, potion swirl, transparent potion swirl, spell, spell, witch spell, note, portal, flying glyph, flame, lava pop, footstep, water splash, smoke particle, huge explosion, large explosion, explosion, void fog, small smoke, cloud, coloured dust, snowball break, water drip, lava drip, snow shovel, slime, heart, angry villager, happy villager, large smoke, item crack, block break, block dust
		Since:
			2.1
		Patterns:
			(visual|particle) effect[s]
	Weather Type:
		ID: WeatherType
		Description:
			The weather types sunny, rainy, and thundering.
		Examples:
			is raining
			is sunny in the player's world
			message "It is %weather in the argument's world% in %world of the argument%"
		Usage: clear/sun/sunny, rain/rainy/raining, and thunder/thundering/thunderstorm
		Since:
			1.0
		Patterns:
			weather[ ]type[s]
			weather condition[s]
			weather[s]
	World:
		ID: World
		Description:
			One of the server's worlds. Worlds can be put into scripts by surrounding their name with double quotes, e.g. "world_nether", but this might not work reliably as text uses the same syntax.
		Examples:
			broadcast "Hello!" to the world "world_nether"
		Usage: "world_name", e.g. "world"
		Since:
			1.0, 2.2 (alternate syntax)
		Patterns:
			world[s]
Functions:
	abs:
		Description:
			Returns the absolute value of the argument, i.e. makes the argument positive.
		Examples:
			abs(3) = 3
			abs(-2) = 2
		Since:
			2.2
		Return type: Number
		Patterns:
			abs(n: number)
	acos:
		Description:
			The inverse of the cosine, also called arccos. Returns result in degrees, not radians. Only returns values from 0 to 180.
		Examples:
			acos(0) = 90
			acos(1) = 0
			acos(0.5) = 30
		Since:
			2.2
		Return type: Number
		Patterns:
			acos(n: number)
	asin:
		Description:
			The inverse of the sine, also called arcsin. Returns result in degrees, not radians. Only returns values from -90 to 90.
		Examples:
			asin(0) = 0
			asin(1) = 90
			asin(0.5) = 30
		Since:
			2.2
		Return type: Number
		Patterns:
			asin(n: number)
	atan:
		Description:
			The inverse of the tangent, also called arctan. Returns result in degrees, not radians. Only returns values from -90 to 90.
		Examples:
			atan(0) = 0
			atan(1) = 45
			atan(10000) = 89.9943
		Since:
			2.2
		Return type: Number
		Patterns:
			atan(n: number)
	atan2:
		Description:
			Similar to atan, but requires two coordinates and returns values from -180 to 180.
			The returned angle is measured counterclockwise in a standard mathematical coordinate system (x to the right, y to the top).
		Examples:
			atan2(0, 1) = 0
			atan2(10, 0) = 90
			atan2(-10, 5) = -63.4349
		Since:
			2.2
		Return type: Number
		Patterns:
			atan2(x: number, y: number)
	ceil:
		Description:
			Rounds a number down, i.e. returns the closest integer larger than or equal to the argument.
		Examples:
			ceil(2.34) = 3
			ceil(2) = 2
			ceil(2.99) = 3
		Since:
			2.2
		Return type: long
		Patterns:
			ceil(n: number)
	ceiling:
		Description:
			Alias of ceil.
		Examples:
			ceiling(2.34) = 3
			ceiling(2) = 2
			ceiling(2.99) = 3
		Since:
			2.2
		Return type: long
		Patterns:
			ceiling(n: number)
	cos:
		Description:
			The cosine function. This is basically the sine shifted by 90°, i.e. cos(a) = sin(a + 90°), for any number a. Uses degrees, not radians.
		Examples:
			cos(0) = 1
			cos(90) = 0
		Since:
			2.2
		Return type: Number
		Patterns:
			cos(n: number)
	date:
		Description:
			Creates a date from a year, month, and day, and optionally also from hour, minute, second and millisecond.
			A time zone and DST offset can be specified as well (in minutes), if they are left out the server's time zone and DST offset are used (the created date will not retain this information).
		Examples:
			date(2014, 10, 1) # 0:00, 1st October 2014
			date(1990, 3, 5, 14, 30) # 14:30, 5th May 1990
			date(1999, 12, 31, 23, 59, 59, 999, -3*60, 0) # almost year 2000 in parts of Brazil (-3 hours offset, no DST)
		Since:
			2.2
		Return type: Date
		Patterns:
			date(year: number, month: number, day: number, hour: number = [[integer:0]], minute: number = [[integer:0]], second: number = [[integer:0]], millisecond: number = [[integer:0]], zone_offset: number = [[double:NaN]], dst_offset: number = [[double:NaN]])
	exp:
		Description:
			The exponential function. You probably don't need this if you don't know what this is.
		Examples:
			exp(0) = 1
			exp(1) = 2.7183
		Since:
			2.2
		Return type: Number
		Patterns:
			exp(n: number)
	floor:
		Description:
			Rounds a number down, i.e. returns the closest integer smaller than or equal to the argument.
		Examples:
			floor(2.34) = 2
			floor(2) = 2
			floor(2.99) = 2
		Since:
			2.2
		Return type: long
		Patterns:
			floor(n: number)
	ln:
		Description:
			The natural logarithm. You probably don't need this if you don't know what this is.
			Returns NaN (not a number) if the argument is negative.
		Examples:
			ln(1) = 0
			ln(exp(5)) = 5
			ln(2) = 0.6931
		Since:
			2.2
		Return type: Number
		Patterns:
			ln(n: number)
	location:
		Description:
			Creates a location from a world and 3 coordinates, with an optional yaw and pitch.
		Examples:
			location(0, 128, 0)
			location(player's x-coordinate, player's y-coordinate + 5, player's z-coordinate, player's world, 0, 90)
		Since:
			2.2
		Return type: Location
		Patterns:
			location(x: number, y: number, z: number, world: world = event-world, yaw: number = [[integer:0]], pitch: number = [[integer:0]])
	log:
		Description:
			A logarithm, with base 10 if none is specified. This is the inverse operation to exponentiation (for positive bases only), i.e. log(base ^ exponent, base) = exponent for any positive number 'base' and any number 'exponent'.
			Another useful equation is base ^ log(a, base) = a for any numbers 'base' and 'a'.
			Please note that due to how numbers are represented in computers, these equations do not hold for all numbers, as the computed values may slightly differ from the correct value.
			Returns NaN (not a number) if any of the arguments are negative.
		Examples:
			log(100) = 2 # 10^2 = 100
			log(16, 2) = 4 # 2^4 = 16
		Since:
			2.2
		Return type: Number
		Patterns:
			log(n: number, base: number = [[integer:10]])
	max:
		Description:
			Returns the maximum number from a list of numbers.
		Examples:
			max(1) = 1
			max(1, 2, 3, 4) = 4
			max({some list variable::*})
		Since:
			2.2
		Return type: Number
		Patterns:
			max(ns: numbers)
	min:
		Description:
			Returns the minimum number from a list of numbers.
		Examples:
			min(1) = 1
			min(1, 2, 3, 4) = 1
			min({some list variable::*})
		Since:
			2.2
		Return type: Number
		Patterns:
			min(ns: numbers)
	mod:
		Description:
			Returns the modulo of the given arguments, i.e. the remainder of the division d/m, where d and m are the arguments of this function.
			The returned value is always positive. Returns NaN (not a number) if the second argument is zero.
		Examples:
			mod(3, 2) = 1
			mod(256436, 100) = 36
			mod(-1, 10) = 9
		Since:
			2.2
		Return type: Number
		Patterns:
			mod(d: number, m: number)
	product:
		Description:
			Calculates the product of a list of numbers.
		Examples:
			product(1) = 1
			product(2, 3, 4) = 24
			product({some list variable::*})
			product(2, {_v::*}, and the player's y-coordinate)
		Since:
			2.2
		Return type: Number
		Patterns:
			product(ns: numbers)
	round:
		Description:
			Rounds a number, i.e. returns the closest integer to the argument.
		Examples:
			round(2.34) = 2
			round(2) = 2
			round(2.99) = 3
			round(2.5) = 3
		Since:
			2.2
		Return type: long
		Patterns:
			round(n: number)
	sin:
		Description:
			The sine function. It starts at 0° with a value of 0, goes to 1 at 90°, back to 0 at 180°, to -1 at 270° and then repeats every 360°. Uses degrees, not radians.
		Examples:
			sin(90) = 1
			sin(60) = 0.866
		Since:
			2.2
		Return type: Number
		Patterns:
			sin(n: number)
	sqrt:
		Description:
			The square root, which is the inverse operation to squaring a number (for positive numbers only). This is the same as (argument) ^ (1/2) – other roots can be calculated via number ^ (1/root), e.g. set {_l} to {_volume}^(1/3).
			Returns NaN (not a number) if the argument is negative.
		Examples:
			sqrt(4) = 2
			sqrt(2) = 1.4142
			sqrt(-1) = NaN
		Since:
			2.2
		Return type: Number
		Patterns:
			sqrt(n: number)
	sum:
		Description:
			Sums a list of numbers.
		Examples:
			sum(1) = 1
			sum(2, 3, 4) = 9
			sum({some list variable::*})
			sum(2, {_v::*}, and the player's y-coordinate)
		Since:
			2.2
		Return type: Number
		Patterns:
			sum(ns: numbers)
	tan:
		Description:
			The tangent function. This is basically <a href='#sin'>sin(arg)/cos(arg)</code>. Uses degrees, not radians.
		Examples:
			tan(0) = 0
			tan(45) = 1
			tan(89.99) = 5729.5779
		Since:
			2.2
		Return type: Number
		Patterns:
			tan(n: number)
	vector:
		Description:
			Constructs a vector.
		Examples:
			vector(0, 0, 0)
		Since:
			2.2-dev23
		Return type: Vector
		Patterns:
			vector(x: number, y: number, z: number)
	world:
		Description:
			Gets a world from its name.
		Examples:
			set {_nether} to world("%{_world}%_nether")
		Since:
			2.2
		Return type: World
		Patterns:
			world(name: string)